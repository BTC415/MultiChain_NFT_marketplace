{"version":3,"sources":["@core/components/input-password-toggle/index.js","views/pages/authentication/Login.js"],"names":["InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","useState","inputVisibility","setInputVisibility","for","classnames","type","id","onClick","size","renderIcon","defaultProps","ToastContent","t","name","role","color","icon","toast","dismiss","defaultValues","password","loginEmail","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","to","e","preventDefault","lg","sm","src","alt","md","tag","onSubmit","data","Object","values","every","field","length","useJwt","login","email","then","res","userData","accessToken","refreshToken","handleLogin","update","getHomeRouteForLoggedInUser","fullName","username","catch","err","error","console","log","key","render","autoFocus","block"],"mappings":"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","file":"static/js/12.c54d9208.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","// ** React Imports\nimport { useContext } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee, X } from 'react-feather'\n\n// ** Actions\nimport { handleLogin } from '@store/authentication'\n\n// ** Context\nimport { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Alert, Button, CardText, CardTitle, UncontrolledTooltip } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\n\nconst ToastContent = ({ t, name, role }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>You have successfully logged in as an {role} user to Admin Panel!</span>\n      </div>\n    </div>\n  )\n}\n\nconst defaultValues = {\n  password: 'admin',\n  loginEmail: 'admin@demo.com'\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const ability = useContext(AbilityContext)\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = data => {\n    if (Object.values(data).every(field => field.length > 0)) {\n      useJwt\n        .login({ email: data.loginEmail, password: data.password })\n        .then(res => {\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\n          dispatch(handleLogin(data))\n          ability.update(res.data.userData.ability)\n          navigate(getHomeRouteForLoggedInUser(data.role))\n          toast(t => (\n            <ToastContent t={t} role={data.role || 'admin'} name={data.fullName || data.username || 'John Doe'} />\n          ))\n        })\n        .catch(\n          err => {\n            toast.error('Authentication Failed!')\n            console.log('err', err)\n          }\n        )\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n\n          <h2 className='brand-text text-primary ms-1'>Administrator</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Admin Panel! 👋\n            </CardTitle>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='loginEmail'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  {/* <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link> */}\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button type='submit' color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n            {/* <p className='text-center mt-2'>\n              <span className='me-25'>New on our platform?</span>\n              <Link to='/register'>\n                <span>Create an account</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div> */}\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n"],"sourceRoot":""}