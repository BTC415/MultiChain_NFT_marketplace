{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink\\contracts\\src\\v0.8\\interfaces\\AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5b465c5f15f950b47469da3ad0396d3cae7cb2852f6b8c92d698af49a1c54c4e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "435bfd183fceabd6b2abe9698a7451d1991dbb535e6aa07ea1b803d79095ec86",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981": {
        "src": "@openzeppelin\\contracts\\interfaces\\IERC2981.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/security/PullPayment.sol:PullPayment": {
        "src": "@openzeppelin\\contracts\\security\\PullPayment.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawPayments(address payable)",
          "payments(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PullPayment",
            "src": "@openzeppelin\\contracts\\security\\PullPayment.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_escrow",
            "src": "@openzeppelin\\contracts\\security\\PullPayment.sol:27"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:20",
        "version": {
          "withMetadata": "1f41c26d1f3eb84d1c1233ca34d04c9c64891f4ca53eba6cd118f86c234560c4",
          "withoutMetadata": "31938837325aa02ef9ea1103c5149e035bfc08e07fe3f2d0c8bde321bbad9c6f",
          "linkedWithoutMetadata": "31938837325aa02ef9ea1103c5149e035bfc08e07fe3f2d0c8bde321bbad9c6f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:14",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol:ERC1155Supply": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\ERC1155Supply.sol:16",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "totalSupply(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC1155Supply",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\ERC1155Supply.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\IERC1155MetadataURI.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\utils\\ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "d3ae4eb8516d2900e0671e8e16462987e39a1280da9de6d2e0bf84ca9eb90560",
          "withoutMetadata": "5c7f155534d10a5c47f74861648096c85fe552dcaefd3a7a91829483944e3afe",
          "linkedWithoutMetadata": "5c7f155534d10a5c47f74861648096c85fe552dcaefd3a7a91829483944e3afe"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\utils\\ERC1155Receiver.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e0c6eceead520c04e7e5509aaa8b7c1df60c13523548795bb3c7b14bf73822cf",
          "withoutMetadata": "4d25d45e78727bcafc703bbb4907285a61f036774fab03605769f9bf1ded7566",
          "linkedWithoutMetadata": "4d25d45e78727bcafc703bbb4907285a61f036774fab03605769f9bf1ded7566"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:19",
        "version": {
          "withMetadata": "fad6e7fe696ab1f8c898f7e2fea32bdfa31ad5e8d108ba30aefd8963f6425d9a",
          "withoutMetadata": "8d038a389711ff8a2c6d1b2ef015a3a51f4981b84ef4ca41b1b9980060212076",
          "linkedWithoutMetadata": "8d038a389711ff8a2c6d1b2ef015a3a51f4981b84ef4ca41b1b9980060212076"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721URIStorage.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721URIStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\utils\\ERC721Holder.sol:14",
        "version": {
          "withMetadata": "e970231e8b7ae182a6999c39bf6a26ba59e43dd5275825178034db12132383ab",
          "withoutMetadata": "1652f93be6fb3b2edc18e377aab10bb0937d02c731d4d32082f5080d83d3c487",
          "linkedWithoutMetadata": "1652f93be6fb3b2edc18e377aab10bb0937d02c731d4d32082f5080d83d3c487"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981": {
        "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:24",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "royaltyInfo(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_defaultRoyaltyInfo",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(RoyaltyInfo)5515_storage",
              "contract": "ERC2981",
              "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:30"
            },
            {
              "label": "_tokenRoyaltyInfo",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)5515_storage)",
              "contract": "ERC2981",
              "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)5515_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(RoyaltyInfo)5515_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royaltyFraction",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "8bc9bd3c9c7a2753d1adfd25e375354ace8232705896fa49149179bf267691b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "4560ea5bcf7bba75b7dc46fb3ae57b969996e1866d29a29cb987212489233382",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:11",
        "version": {
          "withMetadata": "39f4b37e13f1f3570a53a17d596a6dead6f5806fc1620041b5aa851b82ce4ea3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/escrow/Escrow.sol:Escrow": {
        "src": "@openzeppelin\\contracts\\utils\\escrow\\Escrow.sol:22",
        "version": {
          "withMetadata": "619c509354a18be1c5b90e0c274f903d63670df84e58328a212a4f0705cadbc3",
          "withoutMetadata": "6c696050f7abc98f0fe5782f3a221d0d25ebe09ee049df6f61b70fa9af74de4f",
          "linkedWithoutMetadata": "6c696050f7abc98f0fe5782f3a221d0d25ebe09ee049df6f61b70fa9af74de4f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin\\contracts\\utils\\escrow\\Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "43d8d3c37b226bf4994ce234e2a3cc7f500bbd934419ef52bf7cbf4cd70bdb38",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "1ea93b54a0c099263476b5e80108ce98d826254b8a920299dd655b4c4997c964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/Addresses.sol:Addresses": {
        "src": "contracts\\Addresses.sol:10",
        "version": {
          "withMetadata": "102e961231d63ec23107dc81329f7898763b3b79bb3478a0ddd31c0dff280f50",
          "withoutMetadata": "e6d341c1414c8c359e4443836841e242cc6adbe6ffbe25c5b56c86763ebfd87f",
          "linkedWithoutMetadata": "e6d341c1414c8c359e4443836841e242cc6adbe6ffbe25c5b56c86763ebfd87f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary"
        ],
        "methods": [
          "()",
          "existingContract(address)",
          "add(address)",
          "getNFTType(address)",
          "remove(address)",
          "verify(address)",
          "getNormalContracts()",
          "getMultiTokenContracts()",
          "getVerifiedNormalContracts()",
          "getVerifiedMultiTokenContracts()",
          "isVerified(address)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 1425,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 1597,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Addresses",
            "src": "contracts\\Addresses.sol:37"
          },
          {
            "kind": "external-library-linking",
            "name": "ArrayLibrary",
            "src": "contracts/libraries/ArrayLibrary.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "normalContracts",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Addresses",
              "src": "contracts\\Addresses.sol:19"
            },
            {
              "label": "multiTokenContracts",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Addresses",
              "src": "contracts\\Addresses.sol:20"
            },
            {
              "label": "verified",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Addresses",
              "src": "contracts\\Addresses.sol:21"
            },
            {
              "label": "contractTypes",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_enum(NFTType)7624)",
              "contract": "Addresses",
              "src": "contracts\\Addresses.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(NFTType)7624": {
              "label": "enum Addresses.NFTType",
              "members": [
                "NONE",
                "EIP721",
                "EIP1155"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_enum(NFTType)7624)": {
              "label": "mapping(address => enum Addresses.NFTType)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC1155Auction.sol:ERC1155Auction": {
        "src": "contracts\\ERC1155Auction.sol:7",
        "version": {
          "withMetadata": "3221a631af3f4bc2aa80aa098f4a5307622c88ef8444069869bc570ff012ef3d",
          "withoutMetadata": "56e633ac0e395e87bae15116296ef95dcc13bdad32c346aa0da5d282985d0aa7",
          "linkedWithoutMetadata": "56e633ac0e395e87bae15116296ef95dcc13bdad32c346aa0da5d282985d0aa7"
        },
        "inherit": [
          "contracts/ERC1155AuctionBase.sol:ERC1155AuctionBase",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary",
          "contracts/libraries/PaymentLibrary.sol:PaymentLibrary"
        ],
        "methods": [
          "createAuction(address,uint256,uint8,uint256)",
          "cancelAuction(address,uint256,uint256,uint256)",
          "bid(address,uint256,address,uint256,uint256,uint256)",
          "cancelBid(address,uint256,address,uint256,uint256)",
          "acceptBid(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 6317,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 8510,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 13250,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 13659,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 13765,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 13873,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 15567,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "ArrayLibrary",
            "src": "contracts/libraries/ArrayLibrary.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "auctionTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:31"
            },
            {
              "label": "auctionTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:32"
            },
            {
              "label": "tokenIdToAuctions",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage))",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:35"
            },
            {
              "label": "auctionsBySeller",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage)))",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Auction)8620_storage)dyn_storage": {
              "label": "struct ERC1155AuctionBase.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint256 => struct ERC1155AuctionBase.Auction[])))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC1155AuctionBase.Auction[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct ERC1155AuctionBase.Auction[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)8620_storage": {
              "label": "struct ERC1155AuctionBase.Auction",
              "members": [
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctioneer",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "bidders",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "bidPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "bidAmounts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC1155AuctionBase.sol:ERC1155AuctionBase": {
        "src": "contracts\\ERC1155AuctionBase.sol:10",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary"
        ],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "getAuctions(address)",
          "getAuctionsBySeller(address,address)",
          "getAuctionsByNFT(address,uint256)",
          "getAuctionsBySellerNFT(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "auctionTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:31"
            },
            {
              "label": "auctionTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:32"
            },
            {
              "label": "tokenIdToAuctions",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage))",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:35"
            },
            {
              "label": "auctionsBySeller",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage)))",
              "contract": "ERC1155AuctionBase",
              "src": "contracts\\ERC1155AuctionBase.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Auction)8620_storage)dyn_storage": {
              "label": "struct ERC1155AuctionBase.Auction[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint256 => struct ERC1155AuctionBase.Auction[])))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC1155AuctionBase.Auction[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Auction)8620_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct ERC1155AuctionBase.Auction[])",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)8620_storage": {
              "label": "struct ERC1155AuctionBase.Auction",
              "members": [
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctioneer",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "bidders",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "bidPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "bidAmounts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC1155Sale.sol:ERC1155Sale": {
        "src": "contracts\\ERC1155Sale.sol:7",
        "version": {
          "withMetadata": "ef3dfda42d2b04cc4789b249242e7b4ad6eb140ce570f1eacadbea1f33408807",
          "withoutMetadata": "ddc6ec4e2136a2656da1206c3a2f55ce1d2ccce8c2cb1a5197b69723af3be527",
          "linkedWithoutMetadata": "ddc6ec4e2136a2656da1206c3a2f55ce1d2ccce8c2cb1a5197b69723af3be527"
        },
        "inherit": [
          "contracts/ERC1155SaleBase.sol:ERC1155SaleBase",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary",
          "contracts/libraries/PaymentLibrary.sol:PaymentLibrary"
        ],
        "methods": [
          "createSale(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "updateSale(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "buy(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "cancelSale(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "makeOffer(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]),uint256)",
          "updateOffer(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]),uint256,uint256)",
          "cancelOffer(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "acceptOffer(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 10268,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 13362,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 17239,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 19003,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 20219,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 22708,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 23204,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 23310,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 23418,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "ArrayLibrary",
            "src": "contracts/libraries/ArrayLibrary.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "saleTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:27"
            },
            {
              "label": "saleTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:28"
            },
            {
              "label": "tokenIdToSales",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage))",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:31"
            },
            {
              "label": "salesBySeller",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage)))",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Sale)10247_storage)dyn_storage": {
              "label": "struct ERC1155SaleBase.Sale[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint256 => struct ERC1155SaleBase.Sale[])))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC1155SaleBase.Sale[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct ERC1155SaleBase.Sale[])",
              "numberOfBytes": "32"
            },
            "t_struct(Sale)10247_storage": {
              "label": "struct ERC1155SaleBase.Sale",
              "members": [
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "startPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "offerers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "offerPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "offerAmounts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC1155SaleBase.sol:ERC1155SaleBase": {
        "src": "contracts\\ERC1155SaleBase.sol:10",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary",
          "contracts/libraries/PaymentLibrary.sol:PaymentLibrary"
        ],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "getSalesByNFT(address,uint256)",
          "getSalesBySellerNFT(address,address,uint256)",
          "getSale(address,uint256,(uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "getSales(address)",
          "getSalesBySeller(address,address)",
          "getCurrentPrice((uint8,address,uint256,uint256,uint256,uint256,uint256,address[],uint256[],uint256[]))",
          "getSaleTokens(address)",
          "getSaleTokensBySeller(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "saleTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:27"
            },
            {
              "label": "saleTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:28"
            },
            {
              "label": "tokenIdToSales",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage))",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:31"
            },
            {
              "label": "salesBySeller",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage)))",
              "contract": "ERC1155SaleBase",
              "src": "contracts\\ERC1155SaleBase.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Sale)10247_storage)dyn_storage": {
              "label": "struct ERC1155SaleBase.Sale[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage)))": {
              "label": "mapping(address => mapping(address => mapping(uint256 => struct ERC1155SaleBase.Sale[])))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC1155SaleBase.Sale[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(Sale)10247_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct ERC1155SaleBase.Sale[])",
              "numberOfBytes": "32"
            },
            "t_struct(Sale)10247_storage": {
              "label": "struct ERC1155SaleBase.Sale",
              "members": [
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "startPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "startedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "offerers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "offerPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "offerAmounts",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC721Auction.sol:ERC721Auction": {
        "src": "contracts\\ERC721Auction.sol:7",
        "version": {
          "withMetadata": "d351cb427f826d1fb04d4f417b4bb3f2ca87218dda27b7fde2746b781d90d599",
          "withoutMetadata": "0c23369c2c24eb72b13858704b834f022237b3bc3a023bae0d3b5d7fecf513a8",
          "linkedWithoutMetadata": "0c23369c2c24eb72b13858704b834f022237b3bc3a023bae0d3b5d7fecf513a8"
        },
        "inherit": [
          "contracts/ERC721AuctionBase.sol:ERC721AuctionBase",
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary",
          "contracts/libraries/PaymentLibrary.sol:PaymentLibrary"
        ],
        "methods": [
          "createAuction(address,uint256,uint8)",
          "bid(address,uint256,uint256)",
          "cancelBid(address,uint256)",
          "cancelAuction(address,uint256)",
          "acceptBid(address,uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 1455,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 3373,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 3713,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 3819,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 5987,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 6370,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 6478,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 9888,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 10030,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "ArrayLibrary",
            "src": "contracts/libraries/ArrayLibrary.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "auctionTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC721AuctionBase",
              "src": "contracts\\ERC721AuctionBase.sol:19"
            },
            {
              "label": "auctionTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC721AuctionBase",
              "src": "contracts\\ERC721AuctionBase.sol:20"
            },
            {
              "label": "tokenIdToAuctions",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)12237_storage))",
              "contract": "ERC721AuctionBase",
              "src": "contracts\\ERC721AuctionBase.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)12237_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC721AuctionBase.Auction))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Auction)12237_storage)": {
              "label": "mapping(uint256 => struct ERC721AuctionBase.Auction)",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)12237_storage": {
              "label": "struct ERC721AuctionBase.Auction",
              "members": [
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctioneer",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "bidders",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "bidPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC721AuctionBase.sol:ERC721AuctionBase": {
        "src": "contracts\\ERC721AuctionBase.sol:9",
        "inherit": [
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary"
        ],
        "methods": [
          "getAuctions(address)",
          "getAuctionsBySeller(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "auctionTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC721AuctionBase",
              "src": "contracts\\ERC721AuctionBase.sol:19"
            },
            {
              "label": "auctionTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC721AuctionBase",
              "src": "contracts\\ERC721AuctionBase.sol:20"
            },
            {
              "label": "tokenIdToAuctions",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)12237_storage))",
              "contract": "ERC721AuctionBase",
              "src": "contracts\\ERC721AuctionBase.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)12237_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC721AuctionBase.Auction))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Auction)12237_storage)": {
              "label": "mapping(uint256 => struct ERC721AuctionBase.Auction)",
              "numberOfBytes": "32"
            },
            "t_struct(Auction)12237_storage": {
              "label": "struct ERC721AuctionBase.Auction",
              "members": [
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "auctioneer",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "bidders",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "bidPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC721Sale.sol:ERC721Sale": {
        "src": "contracts\\ERC721Sale.sol:7",
        "version": {
          "withMetadata": "4507ebdb0976cfe3c80455674d7a861a8a9ebf771e5cb217bcb220c370488e9e",
          "withoutMetadata": "f074a62d79b2d76c77f9f2c817992318a2861644c954e80226472670d6f8f7d0",
          "linkedWithoutMetadata": "f074a62d79b2d76c77f9f2c817992318a2861644c954e80226472670d6f8f7d0"
        },
        "inherit": [
          "contracts/ERC721SaleBase.sol:ERC721SaleBase",
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary",
          "contracts/libraries/PaymentLibrary.sol:PaymentLibrary"
        ],
        "methods": [
          "createSale(address,uint256,uint8,uint256,uint256,uint256)",
          "updateSale(address,uint256,uint8,uint256,uint256,uint256)",
          "buy(address,uint256)",
          "cancelSale(address,uint256)",
          "makeOffer(address,uint256,uint256)",
          "updateOffer(address,uint256,uint256)",
          "cancelOffer(address,uint256)",
          "acceptOffer(address,uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 1986,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 2132,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 3380,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 6361,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 6707,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 12083,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 12229,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 15089,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          },
          {
            "src": "contracts/libraries/ArrayLibrary.sol",
            "name": "ArrayLibrary",
            "length": 20,
            "start": 15534,
            "placeholder": "__$e9d29609e19beebe46219d41a81a317a2e$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "ArrayLibrary",
            "src": "contracts/libraries/ArrayLibrary.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "saleTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC721SaleBase",
              "src": "contracts\\ERC721SaleBase.sol:23"
            },
            {
              "label": "saleTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC721SaleBase",
              "src": "contracts\\ERC721SaleBase.sol:24"
            },
            {
              "label": "tokenIdToSales",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Sale)13388_storage))",
              "contract": "ERC721SaleBase",
              "src": "contracts\\ERC721SaleBase.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Sale)13388_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC721SaleBase.Sale))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Sale)13388_storage)": {
              "label": "mapping(uint256 => struct ERC721SaleBase.Sale)",
              "numberOfBytes": "32"
            },
            "t_struct(Sale)13388_storage": {
              "label": "struct ERC721SaleBase.Sale",
              "members": [
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "startPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "offerers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "offerPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ERC721SaleBase.sol:ERC721SaleBase": {
        "src": "contracts\\ERC721SaleBase.sol:9",
        "inherit": [
          "contracts/MarketplaceBase.sol:MarketplaceBase",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary"
        ],
        "methods": [
          "getSale(address,uint256)",
          "getSales(address)",
          "getSalesBySeller(address,address)",
          "getCurrentPrice(address,uint256)",
          "getSaleTokens(address)",
          "getSaleTokensBySeller(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            },
            {
              "label": "saleTokenIds",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "ERC721SaleBase",
              "src": "contracts\\ERC721SaleBase.sol:23"
            },
            {
              "label": "saleTokenIdsBySeller",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))",
              "contract": "ERC721SaleBase",
              "src": "contracts\\ERC721SaleBase.sol:24"
            },
            {
              "label": "tokenIdToSales",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Sale)13388_storage))",
              "contract": "ERC721SaleBase",
              "src": "contracts\\ERC721SaleBase.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(address => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Sale)13388_storage))": {
              "label": "mapping(address => mapping(uint256 => struct ERC721SaleBase.Sale))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Sale)13388_storage)": {
              "label": "mapping(uint256 => struct ERC721SaleBase.Sale)",
              "numberOfBytes": "32"
            },
            "t_struct(Sale)13388_storage": {
              "label": "struct ERC721SaleBase.Sale",
              "members": [
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "payment",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "startPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startedAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "offerers",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "offerPrices",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/MarketplaceBase.sol:MarketplaceBase": {
        "src": "contracts\\MarketplaceBase.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/ArrayLibrary.sol:ArrayLibrary",
          "contracts/libraries/PaymentLibrary.sol:PaymentLibrary"
        ],
        "methods": [
          "initialize()",
          "setAddressesContractAddr(address)",
          "setSparkTokenContractAddr(address)",
          "claim(uint256,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "101",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            },
            {
              "label": "addressesContractAddr",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:24"
            },
            {
              "label": "tokenAddrs",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)2_storage",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:25"
            },
            {
              "label": "claimable",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_array(t_uint256)2_storage)",
              "contract": "MarketplaceBase",
              "src": "contracts\\MarketplaceBase.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)2_storage": {
              "label": "address[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]",
              "numberOfBytes": "64"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)2_storage)": {
              "label": "mapping(address => uint256[2])",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/ProxyRegistry.sol:ProxyRegistry": {
        "src": "contracts\\ProxyRegistry.sol:5",
        "version": {
          "withMetadata": "68dd1d43e2a48404706474266029d42ffac07a3be3bf09fbbe2827e5068c3438",
          "withoutMetadata": "380bd241cf58de7587928cf1cc7553405322a696c31aa493b3554f998929764d",
          "linkedWithoutMetadata": "380bd241cf58de7587928cf1cc7553405322a696c31aa493b3554f998929764d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setProxy(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "proxies",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ProxyRegistry",
              "src": "contracts\\ProxyRegistry.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/interfaces/AddressesInterface.sol:AddressesInterface": {
        "src": "contracts\\interfaces\\AddressesInterface.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "existingContract(address)",
          "isVerified(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/interfaces/ProxyRegistryInterface.sol:ProxyRegistryInterface": {
        "src": "contracts\\interfaces\\ProxyRegistryInterface.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxies(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/ArrayLibrary.sol:ArrayLibrary": {
        "src": "contracts\\libraries\\ArrayLibrary.sol:5",
        "version": {
          "withMetadata": "b4ea6860c38add079d6a700853268bdd36bbfb9727204d7eb78d2d9ac4dd1dae",
          "withoutMetadata": "d15c2782bedb2584be1d3d4ab1a8fabc35806086c7f255bd45563b81a0815bc9",
          "linkedWithoutMetadata": "d15c2782bedb2584be1d3d4ab1a8fabc35806086c7f255bd45563b81a0815bc9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "removeAt(uint256[] storage,uint256)",
          "removeAt(address[] storage,uint256)",
          "remove(uint256[] storage,uint256)",
          "remove(address[] storage,address)",
          "findIndex(uint256[],uint256)",
          "findIndex(address[],address)",
          "findMaxIndex(uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/PaymentLibrary.sol:PaymentLibrary": {
        "src": "contracts\\libraries\\PaymentLibrary.sol:8",
        "version": {
          "withMetadata": "2f7879b0616250f76cb6d549197b4031eed79a55e3e869bdf618a048f83df2b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/RoyaltyLibrary.sol:RoyaltyLibrary"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/libraries/RoyaltyLibrary.sol:RoyaltyLibrary": {
        "src": "contracts\\libraries\\RoyaltyLibrary.sol:8",
        "version": {
          "withMetadata": "6f639b35b8a55f7a0b1b19863d47eb1ef8598b688c207f07039e11920e2db2ed",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Custom1155.sol:Custom1155": {
        "src": "contracts\\mocks\\Custom1155.sol:9",
        "version": {
          "withMetadata": "f7492fe5e094f413abc0c1391d2c423a4cf264e30bd211f6f10656f76e6aeacc",
          "withoutMetadata": "85244f11747f912e18bc8d4c49d8dd8a9e7c33c776efc5dd0ef256717fb61dff",
          "linkedWithoutMetadata": "85244f11747f912e18bc8d4c49d8dd8a9e7c33c776efc5dd0ef256717fb61dff"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol:ERC1155Supply",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(string,uint256)",
          "uri(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Custom1155",
            "src": "contracts\\mocks\\Custom1155.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC1155Supply",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\ERC1155Supply.sol:17"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Custom1155",
              "src": "contracts\\mocks\\Custom1155.sol:10"
            },
            {
              "label": "tokenURIs",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "Custom1155",
              "src": "contracts\\mocks\\Custom1155.sol:11"
            },
            {
              "label": "proxyRegistry",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Custom1155",
              "src": "contracts\\mocks\\Custom1155.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Custom1155Royal.sol:Custom1155Royal": {
        "src": "contracts\\mocks\\Custom1155Royal.sol:10",
        "version": {
          "withMetadata": "d9d15e43d419edbed5e62cf80d69f08a577dff613fdd704b99e1ca1570d47d60",
          "withoutMetadata": "3107ae155fffda872546297db04948bb89debb40f24984448d26f9676f0f803d",
          "linkedWithoutMetadata": "3107ae155fffda872546297db04948bb89debb40f24984448d26f9676f0f803d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981",
          "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol:ERC1155Supply",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(string,uint256,address,uint96)",
          "uri(uint256)",
          "isApprovedForAll(address,address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Custom1155Royal",
            "src": "contracts\\mocks\\Custom1155Royal.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC1155Supply",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\ERC1155Supply.sol:17"
            },
            {
              "label": "_defaultRoyaltyInfo",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(RoyaltyInfo)5515_storage",
              "contract": "ERC2981",
              "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:30"
            },
            {
              "label": "_tokenRoyaltyInfo",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)5515_storage)",
              "contract": "ERC2981",
              "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:31"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Custom1155Royal",
              "src": "contracts\\mocks\\Custom1155Royal.sol:11"
            },
            {
              "label": "tokenURIs",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "Custom1155Royal",
              "src": "contracts\\mocks\\Custom1155Royal.sol:12"
            },
            {
              "label": "proxyRegistry",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Custom1155Royal",
              "src": "contracts\\mocks\\Custom1155Royal.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)5515_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoyaltyInfo)5515_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royaltyFraction",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Custom721.sol:Custom721": {
        "src": "contracts\\mocks\\Custom721.sol:10",
        "version": {
          "withMetadata": "0f4b6596937515cc7e1a390efc3fe61485883275f54e78d4f75206ebb173b0fb",
          "withoutMetadata": "72c18bf2d66ec3ea3a2da008391c02a9a395da0f0ee155926f35aabd33995461",
          "linkedWithoutMetadata": "72c18bf2d66ec3ea3a2da008391c02a9a395da0f0ee155926f35aabd33995461"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "mint(string,uint256)",
          "tokenURI(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Custom721",
            "src": "contracts\\mocks\\Custom721.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:25"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Custom721",
              "src": "contracts\\mocks\\Custom721.sol:11"
            },
            {
              "label": "tokenUris",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "Custom721",
              "src": "contracts\\mocks\\Custom721.sol:12"
            },
            {
              "label": "proxyRegistry",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "Custom721",
              "src": "contracts\\mocks\\Custom721.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Custom721Royal.sol:Custom721Royal": {
        "src": "contracts\\mocks\\Custom721Royal.sol:11",
        "version": {
          "withMetadata": "e7b3f9a77f1727fb61c0bc028ada7f710a30755d13a289b599498be4c6746b68",
          "withoutMetadata": "af108e4d8a9e6ab4a75effaaa1faa64b948e5eaf04d9699fc91190a476784129",
          "linkedWithoutMetadata": "af108e4d8a9e6ab4a75effaaa1faa64b948e5eaf04d9699fc91190a476784129"
        },
        "inherit": [
          "@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/interfaces/IERC2981.sol:IERC2981",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "mint(string,uint256,address,uint96)",
          "tokenURI(uint256)",
          "isApprovedForAll(address,address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Custom721Royal",
            "src": "contracts\\mocks\\Custom721Royal.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol:25"
            },
            {
              "label": "_defaultRoyaltyInfo",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(RoyaltyInfo)5515_storage",
              "contract": "ERC2981",
              "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:30"
            },
            {
              "label": "_tokenRoyaltyInfo",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)5515_storage)",
              "contract": "ERC2981",
              "src": "@openzeppelin\\contracts\\token\\common\\ERC2981.sol:31"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Custom721Royal",
              "src": "contracts\\mocks\\Custom721Royal.sol:12"
            },
            {
              "label": "tokenUris",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "Custom721Royal",
              "src": "contracts\\mocks\\Custom721Royal.sol:13"
            },
            {
              "label": "proxyRegistry",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Custom721Royal",
              "src": "contracts\\mocks\\Custom721Royal.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(RoyaltyInfo)5515_storage)": {
              "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoyaltyInfo)5515_storage": {
              "label": "struct ERC2981.RoyaltyInfo",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "royaltyFraction",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Claim/NFTBankFactory.sol:NFTBankFactory": {
        "src": "contracts\\mocks\\Spark\\Claim\\NFTBankFactory.sol:8",
        "version": {
          "withMetadata": "88d6fc9e709e154459916ef8bc694db96a8200adae59783fc51c86ecf4d7ff62",
          "withoutMetadata": "7465ef547e8586b6ecb958e2b8e993baf49f42dd728687c644aadd2a43c13360",
          "linkedWithoutMetadata": "7465ef547e8586b6ecb958e2b8e993baf49f42dd728687c644aadd2a43c13360"
        },
        "inherit": [
          "contracts/mocks/Spark/Role/PoolCreator.sol:PoolCreator",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createPoolProxy(string,address,uint256[2])",
          "setNewBankImplementationAddr(address)",
          "setNewSuperAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTBankFactory",
            "src": "contracts\\mocks\\Spark\\Claim\\NFTBankFactory.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_poolCreators",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Role)19572_storage",
              "contract": "PoolCreator",
              "src": "contracts\\mocks\\Spark\\Role\\PoolCreator.sol:13"
            },
            {
              "label": "superAdmin",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "NFTBankFactory",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankFactory.sol:9"
            },
            {
              "label": "nftBankImplementationAddr",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NFTBankFactory",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankFactory.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)19572_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Claim/NFTBankImplementation.sol:NFTBankImplementation": {
        "src": "contracts\\mocks\\Spark\\Claim\\NFTBankImplementation.sol:6",
        "version": {
          "withMetadata": "df0ebd0d5f7fbf66b003b80a0949a7a74debe0e8f4a6cf9b5ce9e0b043620129",
          "withoutMetadata": "ba2ea776ac5c5c0acf845b80d682d1e44d55e2b67ece25ba702d18d3540e1d41",
          "linkedWithoutMetadata": "ba2ea776ac5c5c0acf845b80d682d1e44d55e2b67ece25ba702d18d3540e1d41"
        },
        "inherit": [
          "contracts/mocks/Spark/Claim/NFTBankStorageStructure.sol:NFTBankStorageStructure",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/mocks/Spark/libraries/BasisPoints.sol:BasisPoints",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "claimNFT()",
          "lockPool()",
          "deletePool()",
          "updateNFTType(uint256)",
          "getWinners()",
          "removeWinners(address[])",
          "setWinners(address[],uint256[])",
          "withdrawStuckTokens(address,address,uint256)",
          "withdrawStuckERC721NFTs(address,address,uint256)",
          "withdrawStuckERC1155NFTs(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "nftBankImplementation",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:23"
            },
            {
              "label": "poolCreator",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:24"
            },
            {
              "label": "winners",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:32"
            },
            {
              "label": "nftRecipients",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_struct(NFTWithID)16030_storage)",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:34"
            },
            {
              "label": "nftToken",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:36"
            },
            {
              "label": "nftType",
              "offset": 0,
              "slot": "106",
              "type": "t_uint256",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:42"
            },
            {
              "label": "bankType",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:44"
            },
            {
              "label": "nftScheduleStartDate",
              "offset": 0,
              "slot": "108",
              "type": "t_uint256",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:46"
            },
            {
              "label": "isNFTScheduleSettled",
              "offset": 0,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:47"
            },
            {
              "label": "isLocked",
              "offset": 1,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:49"
            },
            {
              "label": "isDeleted",
              "offset": 2,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:50"
            },
            {
              "label": "upgradeEnabled",
              "offset": 3,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(NFTWithID)16030_storage)": {
              "label": "mapping(address => struct NFTBankStorageStructure.NFTWithID)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(NFTWithID)16030_storage": {
              "label": "struct NFTBankStorageStructure.NFTWithID",
              "members": [
                {
                  "label": "isWinner",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "didNFTwithdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "nftID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Claim/NFTBankProxy.sol:NFTBankProxy": {
        "src": "contracts\\mocks\\Spark\\Claim\\NFTBankProxy.sol:6",
        "version": {
          "withMetadata": "b84176a5b2aa1afcfba997dff44e68bca709611a504163b1c0cee551c4566ba6",
          "withoutMetadata": "b4a0e8ea363df0ae0df1c4f3da255917b7b0e523ce91c086ee7d20781f951ece",
          "linkedWithoutMetadata": "b4a0e8ea363df0ae0df1c4f3da255917b7b0e523ce91c086ee7d20781f951ece"
        },
        "inherit": [
          "contracts/mocks/Spark/Claim/NFTBankStorageStructure.sol:NFTBankStorageStructure",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "upgradeTo(address)",
          "enableUpgrade()",
          "disableUpgrade()",
          "initialize(string,address,address,uint256[2])",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTBankProxy",
            "src": "contracts\\mocks\\Spark\\Claim\\NFTBankProxy.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "nftBankImplementation",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:23"
            },
            {
              "label": "poolCreator",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:24"
            },
            {
              "label": "winners",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:32"
            },
            {
              "label": "nftRecipients",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_struct(NFTWithID)16030_storage)",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:34"
            },
            {
              "label": "nftToken",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:36"
            },
            {
              "label": "nftType",
              "offset": 0,
              "slot": "106",
              "type": "t_uint256",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:42"
            },
            {
              "label": "bankType",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:44"
            },
            {
              "label": "nftScheduleStartDate",
              "offset": 0,
              "slot": "108",
              "type": "t_uint256",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:46"
            },
            {
              "label": "isNFTScheduleSettled",
              "offset": 0,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:47"
            },
            {
              "label": "isLocked",
              "offset": 1,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:49"
            },
            {
              "label": "isDeleted",
              "offset": 2,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:50"
            },
            {
              "label": "upgradeEnabled",
              "offset": 3,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(NFTWithID)16030_storage)": {
              "label": "mapping(address => struct NFTBankStorageStructure.NFTWithID)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(NFTWithID)16030_storage": {
              "label": "struct NFTBankStorageStructure.NFTWithID",
              "members": [
                {
                  "label": "isWinner",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "didNFTwithdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "nftID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Claim/NFTBankStorageStructure.sol:NFTBankStorageStructure": {
        "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:18",
        "version": {
          "withMetadata": "12a4e5772e1a48512b646bc5a41ddcda723594ddca72d9160abf7cfcd9ee8fc0",
          "withoutMetadata": "c9b418a047d644339dc393fb5d0c5eccd7c33746b854101688828b88a7b4c692",
          "linkedWithoutMetadata": "c9b418a047d644339dc393fb5d0c5eccd7c33746b854101688828b88a7b4c692"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "nftBankImplementation",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:23"
            },
            {
              "label": "poolCreator",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:24"
            },
            {
              "label": "winners",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:32"
            },
            {
              "label": "nftRecipients",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_struct(NFTWithID)16030_storage)",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:34"
            },
            {
              "label": "nftToken",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:36"
            },
            {
              "label": "nftType",
              "offset": 0,
              "slot": "106",
              "type": "t_uint256",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:42"
            },
            {
              "label": "bankType",
              "offset": 0,
              "slot": "107",
              "type": "t_string_storage",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:44"
            },
            {
              "label": "nftScheduleStartDate",
              "offset": 0,
              "slot": "108",
              "type": "t_uint256",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:46"
            },
            {
              "label": "isNFTScheduleSettled",
              "offset": 0,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:47"
            },
            {
              "label": "isLocked",
              "offset": 1,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:49"
            },
            {
              "label": "isDeleted",
              "offset": 2,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:50"
            },
            {
              "label": "upgradeEnabled",
              "offset": 3,
              "slot": "109",
              "type": "t_bool",
              "contract": "NFTBankStorageStructure",
              "src": "contracts\\mocks\\Spark\\Claim\\NFTBankStorageStructure.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(NFTWithID)16030_storage)": {
              "label": "mapping(address => struct NFTBankStorageStructure.NFTWithID)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(NFTWithID)16030_storage": {
              "label": "struct NFTBankStorageStructure.NFTWithID",
              "members": [
                {
                  "label": "isWinner",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "didNFTwithdrawn",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "nftID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/FPLPoolFactory.sol:NFTPredictionPoolFactory": {
        "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:8",
        "version": {
          "withMetadata": "e8634f7ca087b111040896a1e1e5ab6708e533ef30eaae0ce1612115dcbb09d7",
          "withoutMetadata": "cca9fd0f58c92a635b094099adf601875b2f0488907dc93d5efee32db6333532",
          "linkedWithoutMetadata": "cca9fd0f58c92a635b094099adf601875b2f0488907dc93d5efee32db6333532"
        },
        "inherit": [
          "contracts/mocks/Spark/Role/PoolCreator.sol:PoolCreator",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address,address)",
          "createPoolProxy(string,string,address,address,uint256[11],uint256[8],uint256[8])",
          "setNewNFTPoolImplementationAddr(address)",
          "setNewSuperAdmin(address)",
          "setNewPredictionNumber(address)",
          "setNewUSDStorage(address)",
          "setDefaultTaxRate(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPredictionPoolFactory",
            "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sparksToken",
            "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardManager",
            "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "usdTokenAddress",
            "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_poolCreators",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Role)19572_storage",
              "contract": "PoolCreator",
              "src": "contracts\\mocks\\Spark\\Role\\PoolCreator.sol:13"
            },
            {
              "label": "predictionNumberContract",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IPredictionNumber)20887",
              "contract": "NFTPredictionPoolFactory",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:11"
            },
            {
              "label": "usdStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "NFTPredictionPoolFactory",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:12"
            },
            {
              "label": "superAdmin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "NFTPredictionPoolFactory",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:14"
            },
            {
              "label": "nftPredictionPoolImplementationAddr",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "NFTPredictionPoolFactory",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:16"
            },
            {
              "label": "nftPoolTaxRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolFactory",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:18"
            },
            {
              "label": "minimumStakeAmount",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolFactory",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolFactory.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IPredictionNumber)20887": {
              "label": "contract IPredictionNumber",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)19572_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/FPLPoolImpl.sol:NFTPredictionPoolImplementation": {
        "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolImpl.sol:6",
        "version": {
          "withMetadata": "bfc592fe9aa50c8bd22dd307b9a3da08e656e1bb36f5838229a226863a5209cb",
          "withoutMetadata": "57b9a451acc39265d326556bd7ded13f2dddbfef38c93ce27281e60173aae794",
          "linkedWithoutMetadata": "57b9a451acc39265d326556bd7ded13f2dddbfef38c93ce27281e60173aae794"
        },
        "inherit": [
          "contracts/mocks/Spark/FPL/FPLPoolStorageStructure.sol:NFTPredictionPoolStorageStructure",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/mocks/Spark/libraries/BasisPoints.sol:BasisPoints",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "contracts/mocks/Spark/libraries/CalculateRewardLib.sol:CalculateRewardLib",
          "contracts/mocks/Spark/libraries/ClaimRewardLib.sol:ClaimRewardLib"
        ],
        "methods": [
          "setActivationStatus(bool)",
          "stake(uint256,uint256[])",
          "claimWithStakingReward()",
          "purchaseNFT()",
          "usdPriceForNFT()",
          "lockPool()",
          "updateNFTType(uint256)",
          "endNFTPrediction()",
          "deletePool()",
          "getPredictionLimit(uint256)",
          "getPricePredictionsOfAnAddress(address)",
          "setNFTFloorPriceOnMaturity(uint256)",
          "getPrize(address)",
          "getStakingReturn(address)",
          "getStakers()",
          "setWinnerStakers(address[25],uint256[25])",
          "withdrawStuckTokens(address,address,uint256)",
          "withdrawStuckERC721NFTs(address,address,uint256)",
          "withdrawStuckERC1155NFTs(address,address,uint256,uint256,bytes)",
          "declareEmergency()",
          "emergentWithdraw()"
        ],
        "linkReferences": [
          {
            "src": "contracts/mocks/Spark/libraries/CalculateRewardLib.sol",
            "name": "CalculateRewardLib",
            "length": 20,
            "start": 5326,
            "placeholder": "__$4779fd610c078428472fe1ae7444f80a6f$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/CalculateRewardLib.sol",
            "name": "CalculateRewardLib",
            "length": 20,
            "start": 8046,
            "placeholder": "__$4779fd610c078428472fe1ae7444f80a6f$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 4752,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 5076,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 5482,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 5884,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 6926,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 7275,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 7655,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 8349,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          },
          {
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol",
            "name": "ClaimRewardLib",
            "length": 20,
            "start": 9643,
            "placeholder": "__$fb63fe998ec1a840e5a91a6a68623b1620$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "CalculateRewardLib",
            "src": "contracts/mocks/Spark/libraries/CalculateRewardLib.sol"
          },
          {
            "kind": "external-library-linking",
            "name": "ClaimRewardLib",
            "src": "contracts/mocks/Spark/libraries/ClaimRewardLib.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "nftPredictionPoolImplementation",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:29"
            },
            {
              "label": "poolCreator",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:30"
            },
            {
              "label": "lps",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(LibParams)17965_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:42"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:70"
            },
            {
              "label": "winnerStakers",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:71"
            },
            {
              "label": "prizeRewardRates",
              "offset": 0,
              "slot": "112",
              "type": "t_array(t_struct(PrizeRewardRate)18000_storage)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:72"
            },
            {
              "label": "predictions",
              "offset": 0,
              "slot": "113",
              "type": "t_mapping(t_address,t_struct(StakeWithPrediction)17988_storage)",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:74"
            },
            {
              "label": "nftRecipients",
              "offset": 0,
              "slot": "114",
              "type": "t_mapping(t_address,t_struct(NFTWithID)17995_storage)",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:75"
            },
            {
              "label": "sparksToken",
              "offset": 0,
              "slot": "115",
              "type": "t_contract(ISparksToken)20986",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:78"
            },
            {
              "label": "rewardManager",
              "offset": 0,
              "slot": "116",
              "type": "t_contract(IRewardManager)20915",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:79"
            },
            {
              "label": "usdStorage",
              "offset": 0,
              "slot": "117",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:80"
            },
            {
              "label": "usdToken",
              "offset": 0,
              "slot": "118",
              "type": "t_contract(IERC20)3833",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:81"
            },
            {
              "label": "nftToken",
              "offset": 0,
              "slot": "119",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:82"
            },
            {
              "label": "predictionNumberContract",
              "offset": 0,
              "slot": "120",
              "type": "t_contract(IPredictionNumber)20887",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:84"
            },
            {
              "label": "nftType",
              "offset": 0,
              "slot": "121",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:90"
            },
            {
              "label": "poolType",
              "offset": 0,
              "slot": "122",
              "type": "t_string_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:92"
            },
            {
              "label": "priceCurrency",
              "offset": 0,
              "slot": "123",
              "type": "t_string_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:94"
            },
            {
              "label": "launchDate",
              "offset": 0,
              "slot": "124",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:106"
            },
            {
              "label": "lockTime",
              "offset": 0,
              "slot": "125",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:107"
            },
            {
              "label": "maturityTime",
              "offset": 0,
              "slot": "126",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:108"
            },
            {
              "label": "purchaseExpirationTime",
              "offset": 0,
              "slot": "127",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:109"
            },
            {
              "label": "sizeAllocation",
              "offset": 0,
              "slot": "128",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:111"
            },
            {
              "label": "stakeApr",
              "offset": 0,
              "slot": "129",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:112"
            },
            {
              "label": "prizeAmount",
              "offset": 0,
              "slot": "130",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:114"
            },
            {
              "label": "stakeTaxRate",
              "offset": 0,
              "slot": "131",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:116"
            },
            {
              "label": "minimumStakeAmount",
              "offset": 0,
              "slot": "132",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:117"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "133",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:119"
            },
            {
              "label": "floorPriceOnMaturity",
              "offset": 0,
              "slot": "134",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:122"
            },
            {
              "label": "purchasePriceInUSD",
              "offset": 0,
              "slot": "135",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:123"
            },
            {
              "label": "isAnEmergency",
              "offset": 0,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:125"
            },
            {
              "label": "isActive",
              "offset": 1,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:126"
            },
            {
              "label": "isLocked",
              "offset": 2,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:127"
            },
            {
              "label": "isMatured",
              "offset": 3,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:128"
            },
            {
              "label": "isDeleted",
              "offset": 4,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:129"
            },
            {
              "label": "upgradeEnabled",
              "offset": 5,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:134"
            },
            {
              "label": "nftCollection",
              "offset": 6,
              "slot": "136",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(PrizeRewardRate)18000_storage)dyn_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.PrizeRewardRate[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3833": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPredictionNumber)20887": {
              "label": "contract IPredictionNumber",
              "numberOfBytes": "20"
            },
            "t_contract(IRewardManager)20915": {
              "label": "contract IRewardManager",
              "numberOfBytes": "20"
            },
            "t_contract(ISparksToken)20986": {
              "label": "contract ISparksToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(NFTWithID)17995_storage)": {
              "label": "mapping(address => struct NFTPredictionPoolStorageStructure.NFTWithID)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(StakeWithPrediction)17988_storage)": {
              "label": "mapping(address => struct NFTPredictionPoolStorageStructure.StakeWithPrediction)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LibParams)17965_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.LibParams",
              "members": [
                {
                  "label": "launchDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maturityTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "floorPriceOnMaturity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "prizeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "stakeApr",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isMatured",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(NFTWithID)17995_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.NFTWithID",
              "members": [
                {
                  "label": "isWinner",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isUSDPaid",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "nftID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PrizeRewardRate)18000_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.PrizeRewardRate",
              "members": [
                {
                  "label": "rank",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "percentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakeWithPrediction)17988_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.StakeWithPrediction",
              "members": [
                {
                  "label": "stakedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakedTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountWithdrawn",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastWithdrawalTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pricePredictions",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "difference",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rank",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "didPrizeWithdrawn",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "didUnstake",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/FPLPoolProxy.sol:NFTPredictionPoolProxy": {
        "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolProxy.sol:6",
        "version": {
          "withMetadata": "6103aff8c795700319986e48e5e4739c7873a2e653ca7c5b01d72a3ec57386d5",
          "withoutMetadata": "86e6d770defa628ebf2c7abc5b68548460b82b0256a5f2a87605d0c7b86105be",
          "linkedWithoutMetadata": "86e6d770defa628ebf2c7abc5b68548460b82b0256a5f2a87605d0c7b86105be"
        },
        "inherit": [
          "contracts/mocks/Spark/FPL/FPLPoolStorageStructure.sol:NFTPredictionPoolStorageStructure",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "upgradeTo(address)",
          "enableUpgrade()",
          "disableUpgrade()",
          "initialize(string,string,address,address,address,address,address[4],uint256[11],uint256[8],uint256[8])",
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPredictionPoolProxy",
            "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolProxy.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "nftPredictionPoolImplementation",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:29"
            },
            {
              "label": "poolCreator",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:30"
            },
            {
              "label": "lps",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(LibParams)17965_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:42"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:70"
            },
            {
              "label": "winnerStakers",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:71"
            },
            {
              "label": "prizeRewardRates",
              "offset": 0,
              "slot": "112",
              "type": "t_array(t_struct(PrizeRewardRate)18000_storage)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:72"
            },
            {
              "label": "predictions",
              "offset": 0,
              "slot": "113",
              "type": "t_mapping(t_address,t_struct(StakeWithPrediction)17988_storage)",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:74"
            },
            {
              "label": "nftRecipients",
              "offset": 0,
              "slot": "114",
              "type": "t_mapping(t_address,t_struct(NFTWithID)17995_storage)",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:75"
            },
            {
              "label": "sparksToken",
              "offset": 0,
              "slot": "115",
              "type": "t_contract(ISparksToken)20986",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:78"
            },
            {
              "label": "rewardManager",
              "offset": 0,
              "slot": "116",
              "type": "t_contract(IRewardManager)20915",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:79"
            },
            {
              "label": "usdStorage",
              "offset": 0,
              "slot": "117",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:80"
            },
            {
              "label": "usdToken",
              "offset": 0,
              "slot": "118",
              "type": "t_contract(IERC20)3833",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:81"
            },
            {
              "label": "nftToken",
              "offset": 0,
              "slot": "119",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:82"
            },
            {
              "label": "predictionNumberContract",
              "offset": 0,
              "slot": "120",
              "type": "t_contract(IPredictionNumber)20887",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:84"
            },
            {
              "label": "nftType",
              "offset": 0,
              "slot": "121",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:90"
            },
            {
              "label": "poolType",
              "offset": 0,
              "slot": "122",
              "type": "t_string_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:92"
            },
            {
              "label": "priceCurrency",
              "offset": 0,
              "slot": "123",
              "type": "t_string_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:94"
            },
            {
              "label": "launchDate",
              "offset": 0,
              "slot": "124",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:106"
            },
            {
              "label": "lockTime",
              "offset": 0,
              "slot": "125",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:107"
            },
            {
              "label": "maturityTime",
              "offset": 0,
              "slot": "126",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:108"
            },
            {
              "label": "purchaseExpirationTime",
              "offset": 0,
              "slot": "127",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:109"
            },
            {
              "label": "sizeAllocation",
              "offset": 0,
              "slot": "128",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:111"
            },
            {
              "label": "stakeApr",
              "offset": 0,
              "slot": "129",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:112"
            },
            {
              "label": "prizeAmount",
              "offset": 0,
              "slot": "130",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:114"
            },
            {
              "label": "stakeTaxRate",
              "offset": 0,
              "slot": "131",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:116"
            },
            {
              "label": "minimumStakeAmount",
              "offset": 0,
              "slot": "132",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:117"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "133",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:119"
            },
            {
              "label": "floorPriceOnMaturity",
              "offset": 0,
              "slot": "134",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:122"
            },
            {
              "label": "purchasePriceInUSD",
              "offset": 0,
              "slot": "135",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:123"
            },
            {
              "label": "isAnEmergency",
              "offset": 0,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:125"
            },
            {
              "label": "isActive",
              "offset": 1,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:126"
            },
            {
              "label": "isLocked",
              "offset": 2,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:127"
            },
            {
              "label": "isMatured",
              "offset": 3,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:128"
            },
            {
              "label": "isDeleted",
              "offset": 4,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:129"
            },
            {
              "label": "upgradeEnabled",
              "offset": 5,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:134"
            },
            {
              "label": "nftCollection",
              "offset": 6,
              "slot": "136",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(PrizeRewardRate)18000_storage)dyn_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.PrizeRewardRate[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3833": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPredictionNumber)20887": {
              "label": "contract IPredictionNumber",
              "numberOfBytes": "20"
            },
            "t_contract(IRewardManager)20915": {
              "label": "contract IRewardManager",
              "numberOfBytes": "20"
            },
            "t_contract(ISparksToken)20986": {
              "label": "contract ISparksToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(NFTWithID)17995_storage)": {
              "label": "mapping(address => struct NFTPredictionPoolStorageStructure.NFTWithID)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(StakeWithPrediction)17988_storage)": {
              "label": "mapping(address => struct NFTPredictionPoolStorageStructure.StakeWithPrediction)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LibParams)17965_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.LibParams",
              "members": [
                {
                  "label": "launchDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maturityTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "floorPriceOnMaturity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "prizeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "stakeApr",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isMatured",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(NFTWithID)17995_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.NFTWithID",
              "members": [
                {
                  "label": "isWinner",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isUSDPaid",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "nftID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PrizeRewardRate)18000_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.PrizeRewardRate",
              "members": [
                {
                  "label": "rank",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "percentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakeWithPrediction)17988_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.StakeWithPrediction",
              "members": [
                {
                  "label": "stakedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakedTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountWithdrawn",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastWithdrawalTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pricePredictions",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "difference",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rank",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "didPrizeWithdrawn",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "didUnstake",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/FPLPoolStorageStructure.sol:NFTPredictionPoolStorageStructure": {
        "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:24",
        "version": {
          "withMetadata": "f63d6e7fb05bc9d033cbf74647d5aa32e229cc5dcd9dfc08f142434acb70af1f",
          "withoutMetadata": "2b9ffaf6dd7ac0459b9bdaaaa31fa8a83b9f690c03747e10192e50e7f5ae0bac",
          "linkedWithoutMetadata": "2b9ffaf6dd7ac0459b9bdaaaa31fa8a83b9f690c03747e10192e50e7f5ae0bac"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
            },
            {
              "label": "nftPredictionPoolImplementation",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:29"
            },
            {
              "label": "poolCreator",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:30"
            },
            {
              "label": "lps",
              "offset": 0,
              "slot": "103",
              "type": "t_struct(LibParams)17965_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:42"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:70"
            },
            {
              "label": "winnerStakers",
              "offset": 0,
              "slot": "111",
              "type": "t_array(t_address)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:71"
            },
            {
              "label": "prizeRewardRates",
              "offset": 0,
              "slot": "112",
              "type": "t_array(t_struct(PrizeRewardRate)18000_storage)dyn_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:72"
            },
            {
              "label": "predictions",
              "offset": 0,
              "slot": "113",
              "type": "t_mapping(t_address,t_struct(StakeWithPrediction)17988_storage)",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:74"
            },
            {
              "label": "nftRecipients",
              "offset": 0,
              "slot": "114",
              "type": "t_mapping(t_address,t_struct(NFTWithID)17995_storage)",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:75"
            },
            {
              "label": "sparksToken",
              "offset": 0,
              "slot": "115",
              "type": "t_contract(ISparksToken)20986",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:78"
            },
            {
              "label": "rewardManager",
              "offset": 0,
              "slot": "116",
              "type": "t_contract(IRewardManager)20915",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:79"
            },
            {
              "label": "usdStorage",
              "offset": 0,
              "slot": "117",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:80"
            },
            {
              "label": "usdToken",
              "offset": 0,
              "slot": "118",
              "type": "t_contract(IERC20)3833",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:81"
            },
            {
              "label": "nftToken",
              "offset": 0,
              "slot": "119",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:82"
            },
            {
              "label": "predictionNumberContract",
              "offset": 0,
              "slot": "120",
              "type": "t_contract(IPredictionNumber)20887",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:84"
            },
            {
              "label": "nftType",
              "offset": 0,
              "slot": "121",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:90"
            },
            {
              "label": "poolType",
              "offset": 0,
              "slot": "122",
              "type": "t_string_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:92"
            },
            {
              "label": "priceCurrency",
              "offset": 0,
              "slot": "123",
              "type": "t_string_storage",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:94"
            },
            {
              "label": "launchDate",
              "offset": 0,
              "slot": "124",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:106"
            },
            {
              "label": "lockTime",
              "offset": 0,
              "slot": "125",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:107"
            },
            {
              "label": "maturityTime",
              "offset": 0,
              "slot": "126",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:108"
            },
            {
              "label": "purchaseExpirationTime",
              "offset": 0,
              "slot": "127",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:109"
            },
            {
              "label": "sizeAllocation",
              "offset": 0,
              "slot": "128",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:111"
            },
            {
              "label": "stakeApr",
              "offset": 0,
              "slot": "129",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:112"
            },
            {
              "label": "prizeAmount",
              "offset": 0,
              "slot": "130",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:114"
            },
            {
              "label": "stakeTaxRate",
              "offset": 0,
              "slot": "131",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:116"
            },
            {
              "label": "minimumStakeAmount",
              "offset": 0,
              "slot": "132",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:117"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "133",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:119"
            },
            {
              "label": "floorPriceOnMaturity",
              "offset": 0,
              "slot": "134",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:122"
            },
            {
              "label": "purchasePriceInUSD",
              "offset": 0,
              "slot": "135",
              "type": "t_uint256",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:123"
            },
            {
              "label": "isAnEmergency",
              "offset": 0,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:125"
            },
            {
              "label": "isActive",
              "offset": 1,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:126"
            },
            {
              "label": "isLocked",
              "offset": 2,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:127"
            },
            {
              "label": "isMatured",
              "offset": 3,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:128"
            },
            {
              "label": "isDeleted",
              "offset": 4,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:129"
            },
            {
              "label": "upgradeEnabled",
              "offset": 5,
              "slot": "136",
              "type": "t_bool",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:134"
            },
            {
              "label": "nftCollection",
              "offset": 6,
              "slot": "136",
              "type": "t_address",
              "contract": "NFTPredictionPoolStorageStructure",
              "src": "contracts\\mocks\\Spark\\FPL\\FPLPoolStorageStructure.sol:137"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(PrizeRewardRate)18000_storage)dyn_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.PrizeRewardRate[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)3833": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPredictionNumber)20887": {
              "label": "contract IPredictionNumber",
              "numberOfBytes": "20"
            },
            "t_contract(IRewardManager)20915": {
              "label": "contract IRewardManager",
              "numberOfBytes": "20"
            },
            "t_contract(ISparksToken)20986": {
              "label": "contract ISparksToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(NFTWithID)17995_storage)": {
              "label": "mapping(address => struct NFTPredictionPoolStorageStructure.NFTWithID)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(StakeWithPrediction)17988_storage)": {
              "label": "mapping(address => struct NFTPredictionPoolStorageStructure.StakeWithPrediction)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LibParams)17965_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.LibParams",
              "members": [
                {
                  "label": "launchDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maturityTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "floorPriceOnMaturity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "prizeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "stakeApr",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isMatured",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(NFTWithID)17995_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.NFTWithID",
              "members": [
                {
                  "label": "isWinner",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isUSDPaid",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "nftID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(PrizeRewardRate)18000_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.PrizeRewardRate",
              "members": [
                {
                  "label": "rank",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "percentage",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(StakeWithPrediction)17988_storage": {
              "label": "struct NFTPredictionPoolStorageStructure.StakeWithPrediction",
              "members": [
                {
                  "label": "stakedBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakedTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amountWithdrawn",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastWithdrawalTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pricePredictions",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "difference",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rank",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "didPrizeWithdrawn",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "didUnstake",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/PriceConsumerUpgradeable.sol:PriceConsumerUpgradeable": {
        "src": "contracts\\mocks\\Spark\\FPL\\PriceConsumerUpgradeable.sol:7",
        "version": {
          "withMetadata": "2a0d59237d023bd1a4579f3029572bf62af79b0e12316b5142ce4f7fb791a054",
          "withoutMetadata": "bbbdfbccbf7d63c736d408ecaeba68162bcd7921e41f52bec9abb685380cecff",
          "linkedWithoutMetadata": "bbbdfbccbf7d63c736d408ecaeba68162bcd7921e41f52bec9abb685380cecff"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__PriceConsumer_initialize(address)",
          "getDecimals()",
          "getLatestPrice()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "priceFeed",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(AggregatorV3Interface)45",
              "contract": "PriceConsumerUpgradeable",
              "src": "contracts\\mocks\\Spark\\FPL\\PriceConsumerUpgradeable.sol:8"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/USDRetriever.sol:USDRetriever": {
        "src": "contracts\\mocks\\Spark\\FPL\\USDRetriever.sol:6",
        "version": {
          "withMetadata": "525d0189a3d8deaf5aea048a5b612da766b2e5572b2352418a55c862acd1cf4a",
          "withoutMetadata": "814fe1f606bfb9730ba17f242f281dfcc44eeef461dcd88681d6b713b7ccc6b8",
          "linkedWithoutMetadata": "814fe1f606bfb9730ba17f242f281dfcc44eeef461dcd88681d6b713b7ccc6b8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUSDBalance()",
          "getUSDToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "USDCContract",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)3833",
              "contract": "USDRetriever",
              "src": "contracts\\mocks\\Spark\\FPL\\USDRetriever.sol:7"
            }
          ],
          "types": {
            "t_contract(IERC20)3833": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/FPL/WrappedTokenDistributorUpgradeable.sol:WrappedTokenDistributorUpgradeable": {
        "src": "contracts\\mocks\\Spark\\FPL\\WrappedTokenDistributorUpgradeable.sol:7",
        "version": {
          "withMetadata": "7c314d9ba3a24d01e2ba8e6548fd0902bee92582dab4895ff36ee57905ae6f48",
          "withoutMetadata": "81431f9454c35ae43eb78706c8660fbe58be0f52b41369745bb2e2b567a2a142",
          "linkedWithoutMetadata": "81431f9454c35ae43eb78706c8660fbe58be0f52b41369745bb2e2b567a2a142"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "__WrappedTokenDistributor_initialize(address,address,address)",
          "getEstimatedWrappedTokenForUSD(uint256)",
          "getPathForUSDToWrappedToken()",
          "getSwapRouter()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
            },
            {
              "label": "swapRouter",
              "offset": 2,
              "slot": "0",
              "type": "t_contract(IPancakeRouter02)20864",
              "contract": "WrappedTokenDistributorUpgradeable",
              "src": "contracts\\mocks\\Spark\\FPL\\WrappedTokenDistributorUpgradeable.sol:8"
            },
            {
              "label": "BUSD_CONTRACT_ADDRESS",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WrappedTokenDistributorUpgradeable",
              "src": "contracts\\mocks\\Spark\\FPL\\WrappedTokenDistributorUpgradeable.sol:9"
            },
            {
              "label": "WRAPPED_Token_CONTRACT_ADDRESS",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WrappedTokenDistributorUpgradeable",
              "src": "contracts\\mocks\\Spark\\FPL\\WrappedTokenDistributorUpgradeable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IPancakeRouter02)20864": {
              "label": "contract IPancakeRouter02",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/NFT/NFT.sol:NFT": {
        "src": "contracts\\mocks\\Spark\\NFT\\NFT.sol:12",
        "version": {
          "withMetadata": "0b8bb71be00949c08a3103ef183c77637a79c49fdfd2273086b2d370fcc9e079",
          "withoutMetadata": "28dafbe8a2cde34f8ce40c8c84ae0b5cb6e45e389c64349ec950858f974c6ab8",
          "linkedWithoutMetadata": "28dafbe8a2cde34f8ce40c8c84ae0b5cb6e45e389c64349ec950858f974c6ab8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/security/PullPayment.sol:PullPayment",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "()",
          "mintTo(address)",
          "setBaseTokenURI(string)",
          "withdrawPayments(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFT",
            "src": "contracts\\mocks\\Spark\\NFT\\NFT.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "currentTokenId",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)6057_storage",
              "contract": "NFT",
              "src": "contracts\\mocks\\Spark\\NFT\\NFT.sol:19"
            },
            {
              "label": "baseTokenURI",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "NFT",
              "src": "contracts\\mocks\\Spark\\NFT\\NFT.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6057_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/NFT/NFTMarket.sol:NFTMarketplace": {
        "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:8",
        "version": {
          "withMetadata": "115f9b412800d676337f18fa30c75405f9103938f41851817465d1260cf6b9f8",
          "withoutMetadata": "b97438c81681dd90e75f9eed55d2ce8f563eefcff984245fca9818a6ef23b11d",
          "linkedWithoutMetadata": "b97438c81681dd90e75f9eed55d2ce8f563eefcff984245fca9818a6ef23b11d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "()",
          "updateListingPrice(uint256)",
          "getListingPrice()",
          "createToken(string,uint256)",
          "resellToken(uint256,uint256)",
          "createMarketSale(uint256)",
          "fetchMarketItems()",
          "fetchMyNFTs()",
          "fetchItemsListed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTMarketplace",
            "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "listingPrice",
            "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorage",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721URIStorage.sol:15"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)6057_storage",
              "contract": "NFTMarketplace",
              "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:10"
            },
            {
              "label": "_itemsSold",
              "offset": 0,
              "slot": "8",
              "type": "t_struct(Counter)6057_storage",
              "contract": "NFTMarketplace",
              "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:11"
            },
            {
              "label": "listingPrice",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NFTMarketplace",
              "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:13"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address_payable",
              "contract": "NFTMarketplace",
              "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:14"
            },
            {
              "label": "idToMarketItem",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_struct(MarketItem)18576_storage)",
              "contract": "NFTMarketplace",
              "src": "contracts\\mocks\\Spark\\NFT\\NFTMarket.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(MarketItem)18576_storage)": {
              "label": "mapping(uint256 => struct NFTMarketplace.MarketItem)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6057_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(MarketItem)18576_storage": {
              "label": "struct NFTMarketplace.MarketItem",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "owner",
                  "type": "t_address_payable",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "sold",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Role/Operator.sol:Operator": {
        "src": "contracts\\mocks\\Spark\\Role\\Operator.sol:8",
        "version": {
          "withMetadata": "eb82c45e45aaf86ad8f1c6577afecb63a6091d31135ad0794442b4d98eca0bf7",
          "withoutMetadata": "2e9d83f7d3da6403bc658e263d230ac8e0267a1b0f411765fa3c895ea663c9ef",
          "linkedWithoutMetadata": "2e9d83f7d3da6403bc658e263d230ac8e0267a1b0f411765fa3c895ea663c9ef"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/mocks/Spark/Role/Roles.sol:Roles"
        ],
        "methods": [
          "()",
          "isOperator(address)",
          "addOperator(address)",
          "renounceOperator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Operator",
            "src": "contracts\\mocks\\Spark\\Role\\Operator.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_operators",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Role)19572_storage",
              "contract": "Operator",
              "src": "contracts\\mocks\\Spark\\Role\\Operator.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)19572_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Role/PoolCreator.sol:PoolCreator": {
        "src": "contracts\\mocks\\Spark\\Role\\PoolCreator.sol:7",
        "version": {
          "withMetadata": "90c2e907e67c958377685a9ffc6eb5b5dc2adcb18ef87dca8b71da0c6f5040a0",
          "withoutMetadata": "6b864949ef8eac40f33cb4ed4d3753dea4e177d177965c83fe121d1394a36827",
          "linkedWithoutMetadata": "6b864949ef8eac40f33cb4ed4d3753dea4e177d177965c83fe121d1394a36827"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/mocks/Spark/Role/Roles.sol:Roles"
        ],
        "methods": [
          "()",
          "isPoolCreator(address)",
          "addPoolCreator(address)",
          "renouncePoolCreator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolCreator",
            "src": "contracts\\mocks\\Spark\\Role\\PoolCreator.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_poolCreators",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Role)19572_storage",
              "contract": "PoolCreator",
              "src": "contracts\\mocks\\Spark\\Role\\PoolCreator.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)19572_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Role/Rewarder.sol:Rewarder": {
        "src": "contracts\\mocks\\Spark\\Role\\Rewarder.sol:8",
        "version": {
          "withMetadata": "e6fd3657ac7169500e63242d9c16207f98a67fab61ee772bfc5bf15566489933",
          "withoutMetadata": "3a02f8d7d3ad743662e7e75c791a27858763a7690d147f1f0190a48a79929c15",
          "linkedWithoutMetadata": "3a02f8d7d3ad743662e7e75c791a27858763a7690d147f1f0190a48a79929c15"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/mocks/Spark/Role/Roles.sol:Roles"
        ],
        "methods": [
          "()",
          "isRewarder(address)",
          "addRewarder(address)",
          "renounceRewarder()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewarder",
            "src": "contracts\\mocks\\Spark\\Role\\Rewarder.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_rewarders",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Role)19572_storage",
              "contract": "Rewarder",
              "src": "contracts\\mocks\\Spark\\Role\\Rewarder.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)19572_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Role/Roles.sol:Roles": {
        "src": "contracts\\mocks\\Spark\\Role\\Roles.sol:8",
        "version": {
          "withMetadata": "2df57b793a81abe5769728fe637bbb1d43f4380d638e50204551b78a285f655e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Test/TestERC1155.sol:TestERC1155": {
        "src": "contracts\\mocks\\Spark\\Test\\TestERC1155.sol:9",
        "version": {
          "withMetadata": "31fc133037f1b1b6e732f1ae781f968565058bb438716fe8bfd7edab9e942c37",
          "withoutMetadata": "8584e874e83633cdfd6567c496d465edf8976c8f84fc3817c13c1bc8574b11d6",
          "linkedWithoutMetadata": "8584e874e83633cdfd6567c496d465edf8976c8f84fc3817c13c1bc8574b11d6"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "(string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC1155",
            "src": "contracts\\mocks\\Spark\\Test\\TestERC1155.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Test/TestERC721.sol:TestERC721": {
        "src": "contracts\\mocks\\Spark\\Test\\TestERC721.sol:9",
        "version": {
          "withMetadata": "abc6343818f2080ef3f305f3848f6e1a7007946fa5ce70bda21338a0e39b7f07",
          "withoutMetadata": "43f0bc1956fb286d54dc20ba8375ebb07a6a728dede9fa53bc82351b9404ef3f",
          "linkedWithoutMetadata": "43f0bc1956fb286d54dc20ba8375ebb07a6a728dede9fa53bc82351b9404ef3f"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts\\mocks\\Spark\\Test\\TestERC721.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Test/WrappedERC20Token.sol:WrappedERC20Token": {
        "src": "contracts\\mocks\\Spark\\Test\\WrappedERC20Token.sol:9",
        "version": {
          "withMetadata": "8bea8db74cc9793e90356a1a52b4963cf5b5e677c37c72f205f309d1ef29e9d3",
          "withoutMetadata": "68ffafe16175a193d0e04332af1b54314ed2b5ca35f34bd30c6f2fa7ae01bfa9",
          "linkedWithoutMetadata": "68ffafe16175a193d0e04332af1b54314ed2b5ca35f34bd30c6f2fa7ae01bfa9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "(string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrappedERC20Token",
            "src": "contracts\\mocks\\Spark\\Test\\WrappedERC20Token.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Token/RewardManager.sol:RewardManager": {
        "src": "contracts\\mocks\\Spark\\Token\\RewardManager.sol:11",
        "version": {
          "withMetadata": "055b9761f28757a13ff08275cf5eb1f792b1b519a18fab7892c353863e8c765f",
          "withoutMetadata": "30ce4b19404a18cdba81987a55048937165419d30460c9f11fc946c81ad34582",
          "linkedWithoutMetadata": "30ce4b19404a18cdba81987a55048937165419d30460c9f11fc946c81ad34582"
        },
        "inherit": [
          "contracts/mocks/Spark/Role/Rewarder.sol:Rewarder",
          "contracts/mocks/Spark/Role/Operator.sol:Operator",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setOperator(address)",
          "addPool(address)",
          "rewardUser(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardManager",
            "src": "contracts\\mocks\\Spark\\Token\\RewardManager.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Role)19572_storage",
              "contract": "Operator",
              "src": "contracts\\mocks\\Spark\\Role\\Operator.sol:14"
            },
            {
              "label": "_rewarders",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(Role)19572_storage",
              "contract": "Rewarder",
              "src": "contracts\\mocks\\Spark\\Role\\Rewarder.sol:14"
            },
            {
              "label": "sparksToken",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ISparksToken)20986",
              "contract": "RewardManager",
              "src": "contracts\\mocks\\Spark\\Token\\RewardManager.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ISparksToken)20986": {
              "label": "contract ISparksToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(Role)19572_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/Token/SparksToken.sol:SparksToken": {
        "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:12",
        "version": {
          "withMetadata": "8e783ffdd0e8f040032c9fca9d88fc2d9a143c5c61df553d20380bcc50189b67",
          "withoutMetadata": "44a833b9c131d0b939cbe9cc956f00692e20f6f055e65a153858a10abda06fbd",
          "linkedWithoutMetadata": "44a833b9c131d0b939cbe9cc956f00692e20f6f055e65a153858a10abda06fbd"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/mocks/Spark/interfaces/ILocker.sol:ILockerUser"
        ],
        "libraries": [
          "contracts/mocks/Spark/libraries/BasisPoints.sol:BasisPoints",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "()",
          "getTaxationWallet()",
          "setTaxationWallet(address)",
          "setLocker(address)",
          "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address,address)",
          "distributeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparksToken",
            "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:57"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_isDistributionComplete",
            "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "SeedInvestmentAddr",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:22"
            },
            {
              "label": "StrategicRoundAddr",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:23"
            },
            {
              "label": "PrivateSaleAddr",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:24"
            },
            {
              "label": "PublicSaleAddr",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:25"
            },
            {
              "label": "TeamAllocationAddr",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:26"
            },
            {
              "label": "StakingRewardsAddr",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:27"
            },
            {
              "label": "CommunityDevelopmentAddr",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:28"
            },
            {
              "label": "MarketingDevelopmentAddr",
              "offset": 0,
              "slot": "13",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:29"
            },
            {
              "label": "LiquidityPoolAddr",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:30"
            },
            {
              "label": "AirDropAddr",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:31"
            },
            {
              "label": "taxationWallet",
              "offset": 0,
              "slot": "16",
              "type": "t_address",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:33"
            },
            {
              "label": "_isDistributionComplete",
              "offset": 20,
              "slot": "16",
              "type": "t_bool",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:53"
            },
            {
              "label": "locker",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(ILocker)20459",
              "contract": "SparksToken",
              "src": "contracts\\mocks\\Spark\\Token\\SparksToken.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ILocker)20459": {
              "label": "contract ILocker",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/ILocker.sol:ILocker": {
        "src": "contracts\\mocks\\Spark\\interfaces\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lockOrGetPenalty(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/ILocker.sol:ILockerUser": {
        "src": "contracts\\mocks\\Spark\\interfaces\\ILocker.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "locker()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/IPancakeRouter.sol:IPancakeRouter01": {
        "src": "contracts\\mocks\\Spark\\interfaces\\IPancakeRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/IPancakeRouter.sol:IPancakeRouter02": {
        "src": "contracts\\mocks\\Spark\\interfaces\\IPancakeRouter.sol:163",
        "inherit": [
          "contracts/mocks/Spark/interfaces/IPancakeRouter.sol:IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/IPredictionNumber.sol:IPredictionNumber": {
        "src": "contracts\\mocks\\Spark\\interfaces\\IPredictionNumber.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setNewPredictionLimits(uint256[6])",
          "getNumberOfPredictions(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/IRewardManager.sol:IRewardManager": {
        "src": "contracts\\mocks\\Spark\\interfaces\\IRewardManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOperator(address)",
          "addPool(address)",
          "rewardUser(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/interfaces/ISparksToken.sol:ISparksToken": {
        "src": "contracts\\mocks\\Spark\\interfaces\\ISparksToken.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setLocker(address)",
          "setDistributionTeamsAddresses(address,address,address,address,address,address,address,address,address,address)",
          "distributeTokens()",
          "getTaxationWallet()",
          "setTaxationWallet(address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/libraries/BasisPoints.sol:BasisPoints": {
        "src": "contracts\\mocks\\Spark\\libraries\\BasisPoints.sol:6",
        "version": {
          "withMetadata": "b25546a25bdd5aa109fe00c81d980fccd1db6f62c529df57e864b31eb34e65ca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/libraries/CalculateRewardLib.sol:CalculateRewardLib": {
        "src": "contracts\\mocks\\Spark\\libraries\\CalculateRewardLib.sol:7",
        "version": {
          "withMetadata": "3df5f4a9d6600953ad1dc7733e1950d4b704e175e5398b414e1ab9e739eb9ff7",
          "withoutMetadata": "1aab07dd5ddf1577a968eb6d82080f9d8afa91969b0f310adf918aa64b2e9b49",
          "linkedWithoutMetadata": "1aab07dd5ddf1577a968eb6d82080f9d8afa91969b0f310adf918aa64b2e9b49"
        },
        "inherit": [],
        "libraries": [
          "contracts/mocks/Spark/libraries/BasisPoints.sol:BasisPoints",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "calcStakingReturn(uint256,uint256,uint256)",
          "getTotalStakedBalance(NFTPredictionPoolStorageStructure.StakeWithPrediction storage)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/libraries/ClaimRewardLib.sol:ClaimRewardLib": {
        "src": "contracts\\mocks\\Spark\\libraries\\ClaimRewardLib.sol:8",
        "version": {
          "withMetadata": "cf9afcacd657988b3a17894df92caa124aa6c82303e60910034466ae801bbf5e",
          "withoutMetadata": "23c448d84b2c022dbb27c87adbb863bbd170d29f53ef45c288cabaee89f32528",
          "linkedWithoutMetadata": "23c448d84b2c022dbb27c87adbb863bbd170d29f53ef45c288cabaee89f32528"
        },
        "inherit": [],
        "libraries": [
          "contracts/mocks/Spark/libraries/CalculateRewardLib.sol:CalculateRewardLib",
          "contracts/mocks/Spark/libraries/BasisPoints.sol:BasisPoints",
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "getStakingReturn(NFTPredictionPoolStorageStructure.StakeWithPrediction storage,NFTPredictionPoolStorageStructure.LibParams storage)",
          "withdrawStakingReturn(uint256,NFTPredictionPoolStorageStructure.StakeWithPrediction storage)",
          "withdrawPrize(NFTPredictionPoolStorageStructure.StakeWithPrediction storage)",
          "withdrawStakedBalance(NFTPredictionPoolStorageStructure.StakeWithPrediction storage)",
          "getPrize(NFTPredictionPoolStorageStructure.StakeWithPrediction storage,NFTPredictionPoolStorageStructure.LibParams storage,NFTPredictionPoolStorageStructure.PrizeRewardRate[] storage)",
          "payUSDForNFT(NFTPredictionPoolStorageStructure.NFTWithID storage)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/Spark/libraries/PredictionNumber.sol:PredictionNumber": {
        "src": "contracts\\mocks\\Spark\\libraries\\PredictionNumber.sol:10",
        "version": {
          "withMetadata": "db4bbee425c8642c84ae3af07f26c97d56d4b1a65b1f4d2f1311cb2b5993740d",
          "withoutMetadata": "fd15ede23253958b976d6dbaaefe4107efa558892624b65e505fc9942e3d6f0d",
          "linkedWithoutMetadata": "fd15ede23253958b976d6dbaaefe4107efa558892624b65e505fc9942e3d6f0d"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "(uint256[6])",
          "setNewPredictionLimits(uint256[6])",
          "getNumberOfPredictions(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionNumber",
            "src": "contracts\\mocks\\Spark\\libraries\\PredictionNumber.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "predictionRanges",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)6_storage",
              "contract": "PredictionNumber",
              "src": "contracts\\mocks\\Spark\\libraries\\PredictionNumber.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)6_storage": {
              "label": "uint256[6]",
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      },
      "contracts/mocks/TestToken.sol:TestToken": {
        "src": "contracts\\mocks\\TestToken.sol:7",
        "version": {
          "withMetadata": "ee756f215852db833288cf189d4cd046d777189692f981aa1ef1f706303dca49",
          "withoutMetadata": "b756bdff14ac536abc84c61e20a4c57b518c673f391cc2501eb13732d553f565",
          "linkedWithoutMetadata": "b756bdff14ac536abc84c61e20a4c57b518c673f391cc2501eb13732d553f565"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestToken",
            "src": "contracts\\mocks\\TestToken.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.9"
      }
    }
  ]
}