const { expect } = require('chai')
const { parseEther } = require('ethers/lib/utils')
const { ethers } = require('hardhat')

describe('ERC1155 NFT Marketplace Smart Contract', () => {
  let Custom1155Factory, Custom1155RoyaltyFactory, AddressesFactory, ERC1155SaleFactory, ERC1155AuctionFactory, ProxyFactory, SparkTokenFactory, ArrayLibraryFactory
  let custom1155, custom1155Royalty, addresses, erc1155Sale, erc1155Auction, proxy, sparkToken, arrayLibrary
  let accounts
  let nftPrice = parseEther('1.0')
  let nftEndPrice = parseEther('0.5')
  let offerPrice1 = parseEther('0.8')
  let offerPrice2 = parseEther('0.9')

  before(async () => {
    await upgrades.silenceWarnings();

    accounts = await ethers.getSigners()

    ArrayLibraryFactory = await ethers.getContractFactory('ArrayLibrary')
    arrayLibrary = await ArrayLibraryFactory.connect(accounts[0]).deploy()
    AddressesFactory = await ethers.getContractFactory('Addresses', { libraries: { ArrayLibrary: arrayLibrary.address } })
    ERC1155SaleFactory = await ethers.getContractFactory('ERC1155Sale', { libraries: { ArrayLibrary: arrayLibrary.address } })
    ERC1155AuctionFactory = await ethers.getContractFactory('ERC1155Auction', { libraries: { ArrayLibrary: arrayLibrary.address } })
    Custom1155Factory = await ethers.getContractFactory('Custom1155')
    Custom1155RoyaltyFactory = await ethers.getContractFactory('Custom1155Royal')
    ProxyFactory = await ethers.getContractFactory('ProxyRegistry')
    SparkTokenFactory = await ethers.getContractFactory('SparksToken')
  })

  beforeEach(async () => {
    addresses = await AddressesFactory.connect(accounts[0]).deploy()
    await addresses.deployed()
    sparkToken = await SparkTokenFactory.connect(accounts[3]).deploy()
    await sparkToken.deployed()
    erc1155Sale = await upgrades.deployProxy(ERC1155SaleFactory, [], { unsafeAllow: ['external-library-linking'] })
    await erc1155Sale.deployed()
    erc1155Auction = await upgrades.deployProxy(ERC1155AuctionFactory, [], { unsafeAllow: ['external-library-linking'] })
    await erc1155Auction.deployed()
    await (await erc1155Sale.connect(accounts[0]).setSparkTokenContractAddr(sparkToken.address)).wait()
    await (await erc1155Auction.connect(accounts[0]).setSparkTokenContractAddr(sparkToken.address)).wait()
    proxy = await ProxyFactory.deploy()
    await proxy.deployed()
    await (await proxy.connect(accounts[0]).setProxy(erc1155Sale.address)).wait()
    await (await proxy.connect(accounts[0]).setProxy(erc1155Auction.address)).wait()
    custom1155 = await Custom1155Factory.deploy(proxy.address)
    await custom1155.deployed()
    await (await custom1155.connect(accounts[0]).mint('path1', 10)).wait()
    custom1155Royalty = await Custom1155RoyaltyFactory.deploy(proxy.address)
    await custom1155Royalty.deployed()
    await (await custom1155Royalty.connect(accounts[0]).mint('path1', 10, accounts[4].address, 1000)).wait()
  })

  it('Check ERC1155 NFT', async () => {
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(10)
    expect(await custom1155.uri(1)).to.equal('path1')
  })

  it('Check Addresses Contract in Marketplace', async () => {
    expect(await erc1155Sale.addressesContractAddr()).to.equal('0x0000000000000000000000000000000000000000')
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    expect(await erc1155Sale.addressesContractAddr()).to.equal(addresses.address)
  })

  it('Check Adding, Verifying and Removing ERC1155 NFT in Addresses', async () => {
    expect(await addresses.existingContract(custom1155.address)).to.equal(false)
    await expect(addresses.isVerified(custom1155.address)).to.be.revertedWith('Not Existing Contract')
    let multiTokenContracts = await addresses.getMultiTokenContracts()
    let verifiedContracts = await addresses.getVerifiedMultiTokenContracts()
    expect(multiTokenContracts.length).to.equal(0)
    expect(verifiedContracts.length).to.equal(0)
    await (await addresses.connect(accounts[0]).add(custom1155.address)).wait()
    expect(await addresses.existingContract(custom1155.address)).to.equal(true)
    multiTokenContracts = await addresses.getMultiTokenContracts()
    expect(multiTokenContracts.length).to.equal(1)
    expect(multiTokenContracts[0]).to.equal(custom1155.address)
    verifiedContracts = await addresses.getVerifiedMultiTokenContracts()
    expect(verifiedContracts.length).to.equal(0)
    await expect(addresses.add(custom1155.address)).to.be.revertedWith('Exisitng Contract')
    await (await addresses.verify(custom1155.address)).wait()
    expect(await addresses.isVerified(custom1155.address)).to.equal(true)
    verifiedContracts = await addresses.getVerifiedMultiTokenContracts()
    expect(verifiedContracts.length).to.equal(1)
    expect(verifiedContracts[0]).to.equal(custom1155.address)
    await (await addresses.connect(accounts[0]).remove(custom1155.address)).wait()
    multiTokenContracts = await addresses.getMultiTokenContracts()
    verifiedContracts = await addresses.getVerifiedMultiTokenContracts()
    expect(multiTokenContracts.length).to.equal(0)
    expect(verifiedContracts.length).to.equal(0)
  })

  it('Create Sale and Cancel Sale with Verified ERC1155 NFT Smart Contract', async () => {
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let verifiedContracts = await addresses.getVerifiedMultiTokenContracts()
    expect(verifiedContracts.length).to.equal(1)
    expect(verifiedContracts[0]).to.equal(custom1155.address)
    let saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    let saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    let sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155.address, 1, { payment: 0, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), duration: 1000, startedAt: 0, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(1)
    expect(saleTokens[0]).to.equal('1')
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(1)
    expect(saleTokensBySeller[0]).to.equal('1')
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('0')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('5')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    await (await erc1155Sale.connect(accounts[0]).cancelSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(1)
    expect(saleTokens[0]).to.equal('1')
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(1)
    expect(saleTokensBySeller[0]).to.equal('1')
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('0')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('3')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    expect(await custom1155.balanceOf(accounts[0].address, '1')).to.equal(7)
    await (await erc1155Sale.connect(accounts[0]).cancelSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 3, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    expect(await custom1155.balanceOf(accounts[0].address, '1')).to.equal(10)
  })

  it('Create Sale and Purchase Sale with Verified ERC1155 NFT Smart Contract', async () => {
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    let saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    let sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    let salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(0)
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155.address, 1, { payment: 0, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('0')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('5')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(1)
    expect(saleTokens[0]).to.equal('1')
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(1)
    expect(saleTokensBySeller[0]).to.equal('1')
    let currentPrice = await erc1155Sale.getCurrentPrice({ payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 1, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(currentPrice.lte(nftPrice)).to.equal(true)
    expect(currentPrice.gte(nftEndPrice)).to.equal(true)
    let prevBalance = await accounts[0].getBalance()
    let buyRes = await (await erc1155Sale.connect(accounts[1]).buy(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 2, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] }, {
      from: accounts[1].address,
      value: currentPrice.mul(2)
    })).wait()
    let saleSuccessEvent = buyRes.events.find(event => event.event === 'SaleSuccessful')
    let afterBalance = await accounts[0].getBalance()
    expect(afterBalance.sub(prevBalance).eq(saleSuccessEvent.args.price.mul(2))).to.equal(true)
    expect(await custom1155.balanceOf(accounts[1].address, 1)).to.equal(2)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('0')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('3')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(1)
    expect(saleTokens[0]).to.equal('1')
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(1)
    expect(saleTokensBySeller[0]).to.equal('1')
    salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(1)
    expect(salesBySellerNFT.sales[0].payment.toString()).to.equal('0')
    expect(salesBySellerNFT.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(salesBySellerNFT.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(salesBySellerNFT.sales[0].amount.toString()).to.equal('3')
    expect(salesBySellerNFT.sales[0].duration.toString()).to.equal('1000')
    currentPrice = await erc1155Sale.getCurrentPrice({ payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 1, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(currentPrice.lte(nftPrice)).to.equal(true)
    expect(currentPrice.gte(nftEndPrice)).to.equal(true)
    prevBalance = await accounts[0].getBalance()
    buyRes = await (await erc1155Sale.connect(accounts[1]).buy(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 3, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] }, {
      from: accounts[1].address,
      value: currentPrice.mul(3)
    })).wait()
    saleSuccessEvent = buyRes.events.find(event => event.event === 'SaleSuccessful')
    afterBalance = await accounts[0].getBalance()
    expect(afterBalance.sub(prevBalance).eq(saleSuccessEvent.args.price.mul(3))).to.equal(true)
    expect(await custom1155.balanceOf(accounts[1].address, 1)).to.equal(5)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(0)
  })

  it('Create Sale, Create Offer and Cancel Offer with Verified ERC1155 NFT Smart Contract', async () => {
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    let saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    let sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    let salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(0)
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155.address, 1, { payment: 0, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('0')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('5')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    let prevBalance = await accounts[1].getBalance()
    let txRes = await (await erc1155Sale.connect(accounts[1]).makeOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice1, {
      from: accounts[1].address,
      value: offerPrice1.mul(2)
    })).wait()
    let afterBalance = await accounts[1].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice1.mul(2)))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[2]).makeOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice2, {
      from: accounts[2].address,
      value: offerPrice2.mul(2)
    })).wait()
    afterBalance = await accounts[2].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice2.mul(2)))
    let sale = await erc1155Sale.getSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(sale.sale.offerers.length).to.equal(2)
    expect(sale.sale.offerers[0]).to.equal(accounts[1].address)
    expect(sale.sale.offerers[1]).to.equal(accounts[2].address)
    expect(sale.sale.offerPrices[0]).to.equal(offerPrice1)
    expect(sale.sale.offerPrices[1]).to.equal(offerPrice2)
    expect(sale.sale.offerAmounts[0].toString()).to.equal('2')
    expect(sale.sale.offerAmounts[1].toString()).to.equal('2')
    prevBalance = await accounts[1].getBalance();
    txRes = await (await erc1155Sale.connect(accounts[1]).cancelOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    afterBalance = await accounts[1].getBalance();
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice1.mul(2)))
    sale = await erc1155Sale.getSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(sale.sale.offerers.length).to.equal(1)
    expect(sale.sale.offerers[0]).to.equal(accounts[2].address)
    expect(sale.sale.offerPrices[0]).to.equal(offerPrice2)
    expect(sale.sale.offerAmounts[0].toString()).to.equal('2')
    let claimable = await erc1155Sale.claimable(accounts[1].address, 0)
    expect(claimable.toString()).to.equal('0')
    await (await erc1155Sale.connect(accounts[0]).cancelSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 5, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    claimable = await erc1155Sale.claimable(accounts[2].address, 0)
    expect(claimable).to.equal(offerPrice2.mul(2))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[2]).claim(claimable, 0)).wait()
    claimable = await erc1155Sale.claimable(accounts[2].address, 0)
    afterBalance = await accounts[2].getBalance()
    expect(offerPrice2.mul(2).sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.sub(prevBalance))
  })

  it('Create Sale, Create Offer and Accept Offer with Verified ERC1155 NFT Smart Contract', async () => {
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    let saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    let sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    let salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(0)
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155.address, 1, { payment: 0, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('0')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('5')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    let prevBalance = await accounts[1].getBalance()
    let txRes = await (await erc1155Sale.connect(accounts[1]).makeOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice1, {
      from: accounts[1].address,
      value: offerPrice1.mul(5)
    })).wait()
    let afterBalance = await accounts[1].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice1.mul(5)))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[2]).makeOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice2, {
      from: accounts[2].address,
      value: offerPrice2.mul(2)
    })).wait()
    afterBalance = await accounts[2].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice2.mul(2)))
    let sale = await erc1155Sale.getSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(sale.sale.offerers.length).to.equal(2)
    expect(sale.sale.amount.toString()).to.equal('5')
    expect(sale.sale.offerers[0]).to.equal(accounts[1].address)
    expect(sale.sale.offerers[1]).to.equal(accounts[2].address)
    expect(sale.sale.offerPrices[0]).to.equal(offerPrice1)
    expect(sale.sale.offerPrices[1]).to.equal(offerPrice2)
    expect(sale.sale.offerAmounts[0].toString()).to.equal('5')
    expect(sale.sale.offerAmounts[1].toString()).to.equal('2')
    let prevSellerBalance = await accounts[0].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[0]).acceptOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    let afterSellerBalance = await accounts[0].getBalance()
    expect(offerPrice2.mul(2).sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterSellerBalance.sub(prevSellerBalance))
    const claimable = await erc1155Sale.claimable(accounts[1].address, 0)
    expect(claimable).to.equal(offerPrice1.mul(2))
    sale = await erc1155Sale.getSale(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(sale.sale.offerers.length).to.equal(1)
    expect(sale.sale.amount.toString()).to.equal('3')
    expect(sale.sale.offerers[0]).to.equal(accounts[1].address)
    expect(sale.sale.offerPrices[0]).to.equal(offerPrice1)
    expect(sale.sale.offerAmounts[0].toString()).to.equal('3')
    prevSellerBalance = await accounts[0].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[0]).acceptOffer(custom1155.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 3, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    afterSellerBalance = await accounts[0].getBalance()
    expect(offerPrice1.mul(3).sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterSellerBalance.sub(prevSellerBalance))
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
  })

  it('Create Sale and Purchase Sale by Spark Token with Verified ERC1155 NFT Smart Contract', async () => {
    await (await sparkToken.connect(accounts[3]).setDistributionTeamsAddresses(accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address)).wait()
    await (await sparkToken.connect(accounts[3]).distributeTokens()).wait()
    let sellerPrevBalance = await sparkToken.balanceOf(accounts[0].address)
    expect(sellerPrevBalance.toString()).to.equal('0')
    await (await sparkToken.connect(accounts[3]).transfer(accounts[1].address, nftPrice.mul(2))).wait()
    let buyerPrevBalance = await sparkToken.balanceOf(accounts[1].address)
    expect(buyerPrevBalance).to.equal(nftPrice.mul(2))
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    let saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    let sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    let salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(0)
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155.address, 1, { payment: 1, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('1')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('5')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(1)
    expect(saleTokens[0]).to.equal('1')
    saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(1)
    expect(saleTokensBySeller[0]).to.equal('1')
    let currentPrice = await erc1155Sale.getCurrentPrice({ payment: 1, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 1, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(currentPrice.lte(nftPrice)).to.equal(true)
    expect(currentPrice.gte(nftEndPrice)).to.equal(true)
    await (await sparkToken.connect(accounts[1]).approve(erc1155Sale.address, currentPrice.mul(2))).wait()
    let buyRes = await (await erc1155Sale.connect(accounts[1]).buy(custom1155.address, 1, { payment: 1, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 2, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    let saleSuccessEvent = buyRes.events.find(event => event.event === 'SaleSuccessful')
    let sellerAfterBalance = await sparkToken.balanceOf(accounts[0].address)
    let buyerAfterBalance = await sparkToken.balanceOf(accounts[1].address)
    expect(sellerAfterBalance.sub(sellerPrevBalance).eq(saleSuccessEvent.args.price.mul(2))).to.equal(true)
    expect(buyerPrevBalance.sub(buyerAfterBalance).eq(saleSuccessEvent.args.price.mul(2))).to.equal(true)
    expect(await custom1155.balanceOf(accounts[1].address, 1)).to.equal(2)
  })

  it('Create Sale, Create Offer and Accept Offer by Spark Token with Verified ERC1155 NFT Smart Contract', async () => {
    await (await sparkToken.connect(accounts[3]).setDistributionTeamsAddresses(accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address, accounts[3].address)).wait()
    await (await sparkToken.connect(accounts[3]).distributeTokens()).wait()
    await (await sparkToken.connect(accounts[3]).transfer(accounts[1].address, offerPrice1.mul(5))).wait()
    await (await sparkToken.connect(accounts[3]).transfer(accounts[2].address, offerPrice2.mul(2))).wait()
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    let saleTokensBySeller = await erc1155Sale.getSaleTokensBySeller(custom1155.address, accounts[0].address)
    expect(saleTokensBySeller.length).to.equal(0)
    let sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(0)
    let salesBySellerNFT = await erc1155Sale.getSalesBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(salesBySellerNFT.sales.length).to.equal(0)
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155.address, 1, { payment: 1, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    sales = await erc1155Sale.getSalesByNFT(custom1155.address, 1)
    expect(sales.sales.length).to.equal(1)
    expect(sales.sales[0].payment.toString()).to.equal('1')
    expect(sales.sales[0].seller).to.equal(accounts[0].address)
    expect(sales.sales[0].startPrice.toString()).to.equal(nftPrice.toString())
    expect(sales.sales[0].endPrice.toString()).to.equal(nftEndPrice.toString())
    expect(sales.sales[0].amount.toString()).to.equal('5')
    expect(sales.sales[0].duration.toString()).to.equal('1000')
    let prevBalance = await sparkToken.balanceOf(accounts[1].address)
    await (await sparkToken.connect(accounts[1]).approve(erc1155Sale.address, offerPrice1.mul(5))).wait()
    let txRes = await (await erc1155Sale.connect(accounts[1]).makeOffer(custom1155.address, 1, { payment: 1, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice1)).wait()
    let afterBalance = await sparkToken.balanceOf(accounts[1].address)
    expect(prevBalance).to.equal(afterBalance.add(offerPrice1.mul(5)))
    prevBalance = await sparkToken.balanceOf(accounts[2].address)
    await (await sparkToken.connect(accounts[2]).approve(erc1155Sale.address, offerPrice2.mul(2))).wait()
    txRes = await (await erc1155Sale.connect(accounts[2]).makeOffer(custom1155.address, 1, { payment: 1, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice2)).wait()
    afterBalance = await sparkToken.balanceOf(accounts[2].address)
    expect(prevBalance).to.equal(afterBalance.add(offerPrice2.mul(2)))
    let sale = await erc1155Sale.getSale(custom1155.address, 1, { payment: 1, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(sale.sale.offerers.length).to.equal(2)
    expect(sale.sale.amount.toString()).to.equal('5')
    expect(sale.sale.offerers[0]).to.equal(accounts[1].address)
    expect(sale.sale.offerers[1]).to.equal(accounts[2].address)
    expect(sale.sale.offerPrices[0]).to.equal(offerPrice1)
    expect(sale.sale.offerPrices[1]).to.equal(offerPrice2)
    expect(sale.sale.offerAmounts[0].toString()).to.equal('5')
    expect(sale.sale.offerAmounts[1].toString()).to.equal('2')
    let prevSellerBalance = await sparkToken.balanceOf(accounts[0].address)
    txRes = await (await erc1155Sale.connect(accounts[0]).acceptOffer(custom1155.address, 1, { payment: 1, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    let afterSellerBalance = await sparkToken.balanceOf(accounts[0].address)
    expect(offerPrice2.mul(2)).to.equal(afterSellerBalance.sub(prevSellerBalance))
    const claimable = await erc1155Sale.claimable(accounts[1].address, 1)
    expect(claimable).to.equal(offerPrice1.mul(2))
    sale = await erc1155Sale.getSale(custom1155.address, 1, { payment: 1, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })
    expect(sale.sale.offerers.length).to.equal(1)
    expect(sale.sale.amount.toString()).to.equal('3')
    expect(sale.sale.offerers[0]).to.equal(accounts[1].address)
    expect(sale.sale.offerPrices[0]).to.equal(offerPrice1)
    expect(sale.sale.offerAmounts[0].toString()).to.equal('3')
    prevSellerBalance = await sparkToken.balanceOf(accounts[0].address)
    await (await erc1155Sale.connect(accounts[0]).acceptOffer(custom1155.address, 1, { payment: 1, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 3, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    afterSellerBalance = await sparkToken.balanceOf(accounts[0].address)
    expect(offerPrice1.mul(3)).to.equal(afterSellerBalance.sub(prevSellerBalance))
    saleTokens = await erc1155Sale.getSaleTokens(custom1155.address)
    expect(saleTokens.length).to.equal(0)
    prevBalance = await sparkToken.balanceOf(accounts[1].address)
    await (await erc1155Sale.connect(accounts[1]).claim(claimable, 1)).wait()
    afterBalance = await sparkToken.balanceOf(accounts[1].address)
    expect(afterBalance.sub(prevBalance)).to.equal(claimable)
  })

  it('Create Auction, Create Bid and Cancel Auction with Verified ERC1155 NFT Smart Contract', async () => {
    await (await erc1155Auction.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    await (await erc1155Auction.connect(accounts[0]).createAuction(custom1155.address, 1, 0, 5)).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    const startedAt = auctions[0].startedAt
    let prevBalance = await accounts[1].getBalance()
    let txRes = await (await erc1155Auction.connect(accounts[1]).bid(custom1155.address, 1, accounts[0].address, startedAt, 5, offerPrice1, {
      from: accounts[1].address,
      value: offerPrice1.mul(5)
    })).wait()
    let afterBalance = await accounts[1].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice1.mul(5)))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[2]).bid(custom1155.address, 1, accounts[0].address, startedAt, 2, offerPrice2, {
      from: accounts[2].address,
      value: offerPrice2.mul(2)
    })).wait()
    afterBalance = await accounts[2].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice2.mul(2)))
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(2)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('5')
    expect(auctions[0].bidders[1]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[1]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[1].toString()).to.equal('2')
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(2)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('5')
    expect(auctions[0].bidders[1]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[1]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[1].toString()).to.equal('2')
    prevBalance = await accounts[1].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[1]).cancelBid(custom1155.address, 1, accounts[0].address, startedAt, 2)).wait()
    afterBalance = await accounts[1].getBalance()
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice1.mul(2)))
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(2)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('3')
    expect(auctions[0].bidders[1]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[1]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[1].toString()).to.equal('2')
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(2)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('3')
    expect(auctions[0].bidders[1]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[1]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[1].toString()).to.equal('2')
    prevBalance = await accounts[1].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[1]).cancelBid(custom1155.address, 1, accounts[0].address, startedAt, 3)).wait()
    afterBalance = await accounts[1].getBalance()
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice1.mul(3)))
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(1)
    expect(auctions[0].bidders[0]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('2')
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(1)
    expect(auctions[0].bidders[0]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('2')
    await (await erc1155Auction.connect(accounts[0]).cancelAuction(custom1155.address, 1, startedAt, 4)).wait()
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].amount.toString()).to.equal('1')
    expect(auctions[0].bidders.length).to.equal(1)
    expect(auctions[0].bidders[0]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('1')
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].amount.toString()).to.equal('1')
    expect(auctions[0].bidders.length).to.equal(1)
    expect(auctions[0].bidders[0]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('1')
    expect(await erc1155Auction.claimable(accounts[2].address, 0)).to.equal(offerPrice2)
    await (await erc1155Auction.connect(accounts[0]).cancelAuction(custom1155.address, 1, startedAt, 1)).wait()
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    expect(await erc1155Auction.claimable(accounts[2].address, 0)).to.equal(offerPrice2.mul(2))
  })

  it('Create Auction, Create Bid and Accept Bid with Verified ERC1155 NFT Smart Contract', async () => {
    await (await erc1155Auction.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155.address)).wait()
    await (await addresses.verify(custom1155.address)).wait()
    let auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    await (await erc1155Auction.connect(accounts[0]).createAuction(custom1155.address, 1, 0, 5)).wait()
    expect(await custom1155.balanceOf(accounts[0].address, 1)).to.equal(5)
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    const startedAt = auctions[0].startedAt
    let prevBalance = await accounts[1].getBalance()
    let txRes = await (await erc1155Auction.connect(accounts[1]).bid(custom1155.address, 1, accounts[0].address, startedAt, 5, offerPrice1, {
      from: accounts[1].address,
      value: offerPrice1.mul(5)
    })).wait()
    let afterBalance = await accounts[1].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice1.mul(5)))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[2]).bid(custom1155.address, 1, accounts[0].address, startedAt, 2, offerPrice2, {
      from: accounts[2].address,
      value: offerPrice2.mul(2)
    })).wait()
    afterBalance = await accounts[2].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice2.mul(2)))
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(2)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('5')
    expect(auctions[0].bidders[1]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[1]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[1].toString()).to.equal('2')
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(2)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('5')
    expect(auctions[0].bidders[1]).to.equal(accounts[2].address)
    expect(auctions[0].bidPrices[1]).to.equal(offerPrice2)
    expect(auctions[0].bidAmounts[1].toString()).to.equal('2')
    prevBalance = await accounts[0].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[0]).acceptBid(custom1155.address, 1, startedAt, 2)).wait()
    afterBalance = await accounts[0].getBalance()
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice2.mul(2)))
    expect(await custom1155.balanceOf(accounts[2].address, 1)).to.equal('2')
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(1)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('3')
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(1)
    expect(auctions[0].bidders.length).to.equal(1)
    expect(auctions[0].bidders[0]).to.equal(accounts[1].address)
    expect(auctions[0].bidPrices[0]).to.equal(offerPrice1)
    expect(auctions[0].bidAmounts[0].toString()).to.equal('3')
    expect(await erc1155Auction.claimable(accounts[1].address, 0)).to.equal(offerPrice1.mul(2))
    prevBalance = await accounts[0].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[0]).acceptBid(custom1155.address, 1, startedAt, 3)).wait()
    afterBalance = await accounts[0].getBalance()
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice1.mul(3)))
    expect(await custom1155.balanceOf(accounts[1].address, 1)).to.equal('3')
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155.address, 1)
    expect(auctions.length).to.equal(0)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155.address, 1)
    expect(auctions.length).to.equal(0)
  })

  it('Create Sale and Purchase Sale with Verified ERC1155 Royalty NFT Smart Contract', async () => {
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155Royalty.address)).wait()
    await (await addresses.verify(custom1155Royalty.address)).wait()
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155Royalty.address, 1, { payment: 0, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155Royalty.balanceOf(accounts[0].address, 1)).to.equal(5)
    let sales = await erc1155Sale.getSalesByNFT(custom1155Royalty.address, 1)
    let prevBalance = await accounts[0].getBalance()
    await (await erc1155Sale.connect(accounts[1]).buy(custom1155Royalty.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 2, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] }, {
      from: accounts[1].address,
      value: nftPrice.mul(2)
    })).wait()
    let afterBalance = await accounts[0].getBalance()
    expect(afterBalance.sub(prevBalance).eq(nftPrice.mul(9).div(10).mul(2))).to.equal(true)
    expect(await custom1155Royalty.balanceOf(accounts[1].address, 1)).to.equal(2)
    prevBalance = await accounts[0].getBalance()
    let prevBalanceRoyalty = await accounts[4].getBalance()
    await (await erc1155Sale.connect(accounts[1]).buy(custom1155Royalty.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: sales.sales[0].startPrice, endPrice: sales.sales[0].endPrice, amount: 3, startedAt: sales.sales[0].startedAt, duration: sales.sales[0].duration, offerers: [], offerPrices: [], offerAmounts: [] }, {
      from: accounts[1].address,
      value: nftPrice.mul(3)
    })).wait()
    afterBalance = await accounts[0].getBalance()
    let afterBalanceRoyalty = await accounts[4].getBalance()
    expect(afterBalance.sub(prevBalance).eq(nftPrice.mul(9).div(10).mul(3))).to.equal(true)
    expect(afterBalanceRoyalty.sub(prevBalanceRoyalty).eq(nftPrice.div(10).mul(3))).to.equal(true)
    expect(await custom1155Royalty.balanceOf(accounts[1].address, 1)).to.equal(5)
  })

  it('Create Sale, Create Offer and Accept Offer with Verified ERC1155 Royalty NFT Smart Contract', async () => {
    await (await erc1155Sale.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155Royalty.address)).wait()
    await (await addresses.verify(custom1155Royalty.address)).wait()
    await (await erc1155Sale.connect(accounts[0]).createSale(custom1155Royalty.address, 1, { payment: 0, seller: accounts[0].address, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: 0, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    expect(await custom1155Royalty.balanceOf(accounts[0].address, 1)).to.equal(5)
    let sales = await erc1155Sale.getSalesByNFT(custom1155Royalty.address, 1)
    let prevBalance = await accounts[1].getBalance()
    let txRes = await (await erc1155Sale.connect(accounts[1]).makeOffer(custom1155Royalty.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 5, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice1, {
      from: accounts[1].address,
      value: offerPrice1.mul(5)
    })).wait()
    let afterBalance = await accounts[1].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice1.mul(5)))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[2]).makeOffer(custom1155Royalty.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] }, offerPrice2, {
      from: accounts[2].address,
      value: offerPrice2.mul(2)
    })).wait()
    afterBalance = await accounts[2].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice2.mul(2)))
    let prevSellerBalance = await accounts[0].getBalance()
    let prevRoyaltyBalance = await accounts[4].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[0]).acceptOffer(custom1155Royalty.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 2, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    let afterSellerBalance = await accounts[0].getBalance()
    let afterRoyaltyBalance = await accounts[4].getBalance()
    expect(offerPrice2.mul(2).mul(9).div(10).sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterSellerBalance.sub(prevSellerBalance))
    expect(offerPrice2.mul(2).div(10)).to.equal(afterRoyaltyBalance.sub(prevRoyaltyBalance))
    const claimable = await erc1155Sale.claimable(accounts[1].address, 0)
    expect(claimable).to.equal(offerPrice1.mul(2))
    prevSellerBalance = await accounts[0].getBalance()
    prevRoyaltyBalance = await accounts[4].getBalance()
    txRes = await (await erc1155Sale.connect(accounts[0]).acceptOffer(custom1155Royalty.address, 1, { payment: 0, seller: sales.sales[0].seller, startPrice: nftPrice.toString(), endPrice: nftEndPrice.toString(), startedAt: sales.sales[0].startedAt, duration: 1000, amount: 3, offerers: [], offerPrices: [], offerAmounts: [] })).wait()
    afterSellerBalance = await accounts[0].getBalance()
    afterRoyaltyBalance = await accounts[4].getBalance()
    expect(offerPrice1.mul(3).mul(9).div(10).sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterSellerBalance.sub(prevSellerBalance))
    expect(offerPrice1.mul(3).div(10)).to.equal(afterRoyaltyBalance.sub(prevRoyaltyBalance))
  })

  it('Create Auction, Create Bid and Accept Bid with Verified ERC1155 Royalty NFT Smart Contract', async () => {
    await (await erc1155Auction.connect(accounts[0]).setAddressesContractAddr(addresses.address)).wait()
    await (await addresses.add(custom1155Royalty.address)).wait()
    await (await addresses.verify(custom1155Royalty.address)).wait()
    let auctions = await erc1155Auction.getAuctionsByNFT(custom1155Royalty.address, 1)
    expect(auctions.length).to.equal(0)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155Royalty.address, 1)
    expect(auctions.length).to.equal(0)
    await (await erc1155Auction.connect(accounts[0]).createAuction(custom1155Royalty.address, 1, 0, 5)).wait()
    expect(await custom1155Royalty.balanceOf(accounts[0].address, 1)).to.equal(5)
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155Royalty.address, 1)
    const startedAt = auctions[0].startedAt
    let prevBalance = await accounts[1].getBalance()
    let txRes = await (await erc1155Auction.connect(accounts[1]).bid(custom1155Royalty.address, 1, accounts[0].address, startedAt, 5, offerPrice1, {
      from: accounts[1].address,
      value: offerPrice1.mul(5)
    })).wait()
    let afterBalance = await accounts[1].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice1.mul(5)))
    prevBalance = await accounts[2].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[2]).bid(custom1155Royalty.address, 1, accounts[0].address, startedAt, 2, offerPrice2, {
      from: accounts[2].address,
      value: offerPrice2.mul(2)
    })).wait()
    afterBalance = await accounts[2].getBalance()
    expect(prevBalance.sub(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(afterBalance.add(offerPrice2.mul(2)))
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155Royalty.address, 1)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155Royalty.address, 1)
    prevBalance = await accounts[0].getBalance()
    let prevBalanceRoyalty = await accounts[4].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[0]).acceptBid(custom1155Royalty.address, 1, startedAt, 2)).wait()
    afterBalance = await accounts[0].getBalance()
    let afterBalanceRoyalty = await accounts[4].getBalance()
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice2.mul(2).mul(9).div(10)))
    expect(afterBalanceRoyalty).to.equal(prevBalanceRoyalty.add(offerPrice2.mul(2).div(10)))
    expect(await custom1155Royalty.balanceOf(accounts[2].address, 1)).to.equal('2')
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155Royalty.address, 1)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155Royalty.address, 1)
    prevBalance = await accounts[0].getBalance()
    prevBalanceRoyalty = await accounts[4].getBalance()
    txRes = await (await erc1155Auction.connect(accounts[0]).acceptBid(custom1155Royalty.address, 1, startedAt, 3)).wait()
    afterBalance = await accounts[0].getBalance()
    afterBalanceRoyalty = await accounts[4].getBalance()
    expect(afterBalance.add(txRes.cumulativeGasUsed.mul(txRes.effectiveGasPrice))).to.equal(prevBalance.add(offerPrice1.mul(3).mul(9).div(10)))
    expect(afterBalanceRoyalty).to.equal(prevBalanceRoyalty.add(offerPrice1.mul(3).div(10)))
    expect(await custom1155Royalty.balanceOf(accounts[1].address, 1)).to.equal('3')
    auctions = await erc1155Auction.getAuctionsByNFT(custom1155Royalty.address, 1)
    expect(auctions.length).to.equal(0)
    auctions = await erc1155Auction.getAuctionsBySellerNFT(accounts[0].address, custom1155Royalty.address, 1)
    expect(auctions.length).to.equal(0)
  })
})
